<?xml version="1.0" standalone="no"?><?xml-stylesheet type="text/css" href="https://www.processon.com/themes/default/mind/icons/icons.css" ?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" id="mind-svg-view-con" version="1.1" width="3485.1500244140625px" height="4934.39990234375px"><defs></defs><g id="svgbackgroundid"><defs></defs><rect x="0" y="0" width="3485.1500244140625" height="4934.39990234375" fill="#FAFFFA"></rect></g><g transform="translate(-9919.999755859375, -7469.00048828125)" id="sdjakdjak8"><defs></defs><g class="svg-topic-con" transform="translate(0.5,0.5)"><path part="right" sub="true" id="line_15a36b69c674" d="M 10000.000375600961 9935.999286358172 C 10000.000375600961 9935.999286358172 10010.000375600961 7524.099082946777 10130.000375600961 7524.099082946777" stroke="rgb(170,170,170)" fill="none" stroke-width="1"></path><path part="right" sub="true" id="line_94dbd88a7ebf" d="M 10000.000375600961 9935.999286358172 C 10000.000375600961 9935.999286358172 10010.000375600961 7839.499253493088 10130.000375600961 7839.499253493088" stroke="rgb(170,170,170)" fill="none" stroke-width="1"></path><path part="right" sub="true" id="line_b5825f26463f" d="M 10000.000375600961 9935.999286358172 C 10000.000375600961 9935.999286358172 10010.000375600961 8269.19937133789 10130.000375600961 8269.19937133789" stroke="rgb(170,170,170)" fill="none" stroke-width="1"></path><path part="right" sub="true" id="line_9fd9b912a80d" d="M 10000.000375600961 9935.999286358172 C 10000.000375600961 9935.999286358172 10010.000375600961 8841.699171799879 10130.000375600961 8841.699171799879" stroke="rgb(170,170,170)" fill="none" stroke-width="1"></path><path part="right" sub="true" id="line_e954006bb31a" d="M 10000.000375600961 9935.999286358172 C 10000.000375600961 9935.999286358172 10010.000375600961 9342.599311241736 10130.000375600961 9342.599311241736" stroke="rgb(170,170,170)" fill="none" stroke-width="1"></path><path part="right" sub="true" id="line_e9ee3d18e7bb" d="M 10000.000375600961 9935.999286358172 C 10000.000375600961 9935.999286358172 10010.000375600961 9918.199275090143 10130.000375600961 9918.199275090143" stroke="rgb(170,170,170)" fill="none" stroke-width="1"></path><path part="right" sub="true" id="line_6de03c54d26e" d="M 10000.000375600961 9935.999286358172 C 10000.000375600961 9935.999286358172 10010.000375600961 11399.999436598559 10130.000375600961 11399.999436598559" stroke="rgb(170,170,170)" fill="none" stroke-width="1"></path></g><g class="svg-connection-con" transform="translate(0.5,0.5)"></g><g class="svg-freesums-con" transform="translate(0.5,0.5)"></g><g class="svg-freebos-con" transform="translate(0.5,0.5)"></g></g><g id="6de03c54d26e"><rect x="210.00006103515625" y="3905.89990234375" rx="5px" ry="5px" width="241" height="50" style="fill: #ffffff; stroke:rgb(187,187,187);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="17px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:17px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="221.00006103515625" y="3938.2999023437496"><tspan>事件运行server.eventLoop()</tspan></tspan></text></g></g><g id="a7cc84062c40"><rect x="478.737548828125" y="3917.0999145507812" rx="1px" ry="1px" width="309" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="487.737548828125" y="3935.6999145507816"><tspan>当遍历stop_server不为true时，就一直循环主事件</tspan></tspan></text></g></g><g id="ce55f59403f5"><rect x="815.7125549316406" y="2993.7999267578125" rx="1px" ry="1px" width="366" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="824.7125549316406" y="3012.399926757813"><tspan>epoll_wait(m_epollfd, events, MAX_EVENT_NUMBER, -1)</tspan></tspan></text></g></g><g id="f22c96d467d1"><rect x="1208.925048828125" y="2957.9998779296875" rx="1px" ry="1px" width="214" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1217.925048828125" y="2976.599877929688"><tspan>返回值是events上就绪事件的个数</tspan></tspan></text></g></g><g id="58e5f7ef1074"><rect x="1208.925048828125" y="2993.7999267578125" rx="1px" ry="1px" width="289" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1217.925048828125" y="3012.399926757813"><tspan>epoll_wait检测文件描述符上是否有事件的产生</tspan></tspan></text></g></g><g id="698c1c1bd7e2"><rect x="1208.925048828125" y="3029.599853515625" rx="1px" ry="1px" width="474" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1217.925048828125" y="3048.1998535156254"><tspan>epoll_wait函数会内部调整events的排列结构，即把就绪的事件排到events前面</tspan></tspan></text></g></g><g id="a511f651d2af"><rect x="815.7125549316406" y="3960.39990234375" rx="1px" ry="1px" width="327" height="49" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="824.7125549316406" y="3978.9999023437504"><tspan style="font-weight:bolder;">·</tspan><tspan>  对events上的就绪事件进行处理</tspan></tspan><tspan x="824.7125549316406" y="3999.7999023437505"><tspan style="font-weight:bolder;">·</tspan><tspan>  这里用sockfd表示events里某一事件的文件描述符</tspan></tspan></text></g></g><g id="23a105758e23"><rect x="1170.862548828125" y="3333.89990234375" rx="1px" ry="1px" width="270" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1179.862548828125" y="3352.4999023437504"><tspan>sockfd = m_listenfd：表示客户端请求连接</tspan></tspan></text></g></g><g id="ee595a178bab"><rect x="1468.9000549316406" y="3333.89990234375" rx="1px" ry="1px" width="179" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1477.9000549316406" y="3352.4999023437504"><tspan>调用dealclinetdata()来处理</tspan></tspan></text></g></g><g id="5d78e5208532"><rect x="1676.1250610351562" y="3065.39990234375" rx="1px" ry="1px" width="502" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1685.1250610351562" y="3083.9999023437504"><tspan>获取客户端连接的文件描述符connfd并绑定client_address（socket结构体）的信息</tspan></tspan></text></g></g><g id="cd30c69a178d"><rect x="1676.1250610351562" y="3315.9998779296875" rx="1px" ry="1px" width="289" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1685.1250610351562" y="3334.599877929688"><tspan>调用timer(connfd, client_address)添加定时器</tspan></tspan></text></g></g><g id="234c894553f2"><rect x="1992.925048828125" y="3119.099853515625" rx="1px" ry="1px" width="135" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2001.925048828125" y="3137.6998535156254"><tspan>初始化一个http连接</tspan></tspan></text></g></g><g id="2c06ef820792"><rect x="2155.925048828125" y="3101.1998291015625" rx="1px" ry="1px" width="282" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2164.925048828125" y="3119.799829101563"><tspan>users[connfd].init(connfd, client_address...)</tspan></tspan></text></g></g><g id="788e1ba62860"><rect x="2155.925048828125" y="3136.9998779296875" rx="1px" ry="1px" width="167" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2164.925048828125" y="3155.599877929688"><tspan>users是一个http连接数组</tspan></tspan></text></g></g><g id="b3e18f533d5b"><rect x="1992.925048828125" y="3333.89990234375" rx="1px" ry="1px" width="148" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2001.925048828125" y="3352.4999023437504"><tspan>初始化定时器连接资源</tspan></tspan></text></g></g><g id="1f57af2b707f"><rect x="2168.925048828125" y="3172.7999267578125" rx="1px" ry="1px" width="416" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2177.925048828125" y="3191.399926757813"><tspan>设置socket结构体：users_timer[connfd].address = client_address</tspan></tspan></text></g></g><g id="f3b2f1bcef03"><rect x="2168.925048828125" y="3208.599853515625" rx="1px" ry="1px" width="394" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2177.925048828125" y="3227.1998535156254"><tspan>设置socket文件描述符：users_timer[connfd].sockfd = connfd;</tspan></tspan></text></g></g><g id="c6d3d4084cf2"><rect x="2168.925048828125" y="3280.1998291015625" rx="1px" ry="1px" width="392" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2177.925048828125" y="3298.799829101563"><tspan>users_timer是一个client_data结构体数组，client_data包含有：</tspan></tspan></text></g></g><g id="ca57ef6e5d95"><rect x="2589.0125732421875" y="3244.39990234375" rx="1px" ry="1px" width="184" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2598.0125732421875" y="3262.9999023437504"><tspan> util_timer类对象，即定时器</tspan></tspan></text></g></g><g id="a8b5728c4386"><rect x="2589.0125732421875" y="3280.1998291015625" rx="1px" ry="1px" width="97" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2598.0125732421875" y="3298.799829101563"><tspan>socket结构体</tspan></tspan></text></g></g><g id="8aad193dddd3"><rect x="2589.0125732421875" y="3315.9998779296875" rx="1px" ry="1px" width="123" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2598.0125732421875" y="3334.599877929688"><tspan>socket文件描述符</tspan></tspan></text></g></g><g id="e03cc1ba49c4"><rect x="2168.925048828125" y="3405.4998779296875" rx="1px" ry="1px" width="271" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2177.925048828125" y="3424.099877929688"><tspan>定时器是一个util_timer类，类里面包含有：</tspan></tspan></text></g></g><g id="7876ba1c8b42"><rect x="2468.35009765625" y="3351.7999267578125" rx="1px" ry="1px" width="108" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2477.35009765625" y="3370.399926757813"><tspan>到期时间expire</tspan></tspan></text></g></g><g id="76565be688c0"><rect x="2468.35009765625" y="3387.599853515625" rx="1px" ry="1px" width="484" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2477.35009765625" y="3406.1998535156254"><tspan>回调函数cb_func，回调函数，用来关闭非活跃socket并删除events上对应的事件</tspan></tspan></text></g></g><g id="7c39ef0a3485"><rect x="2468.35009765625" y="3423.39990234375" rx="1px" ry="1px" width="85" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2477.35009765625" y="3441.9999023437504"><tspan>client_data</tspan></tspan></text></g></g><g id="d2c5679a20aa"><rect x="2468.35009765625" y="3459.1998901367188" rx="1px" ry="1px" width="161" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2477.35009765625" y="3477.799890136719"><tspan>前驱定时器和后继定时器</tspan></tspan></text></g></g><g id="e9e54169671e"><rect x="2168.925048828125" y="3494.9998779296875" rx="1px" ry="1px" width="417" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2177.925048828125" y="3513.599877929688"><tspan>需要注意的是，client_data和util_timer都包含一个指针用来指向对方</tspan></tspan></text></g></g><g id="2f0164cce1cb"><rect x="1992.925048828125" y="3530.7998657226562" rx="1px" ry="1px" width="274" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2001.925048828125" y="3549.3998657226566"><tspan>将定时器添加到定时器列表m_timer_list里面</tspan></tspan></text></g></g><g id="4a203f699e86"><rect x="1676.1250610351562" y="3584.4998779296875" rx="1px" ry="1px" width="70" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1685.1250610351562" y="3603.099877929688"><tspan>触发模式</tspan></tspan></text></g></g><g id="365075a4cb22"><rect x="1774.1250610351562" y="3566.5999145507812" rx="1px" ry="1px" width="305" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1783.1250610351562" y="3585.1999145507816"><tspan>LT水平触发：这个模式下一次最多连接一个客户端</tspan></tspan></text></g></g><g id="4fe50961f58f"><rect x="1774.1250610351562" y="3602.39990234375" rx="1px" ry="1px" width="614" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1783.1250610351562" y="3620.9999023437504"><tspan>ET边缘触发：对于连续的客户端连接请求，必须要一次性给处理完，直到出现eagain（使用非阻塞I/O）</tspan></tspan></text></g></g><g id="c16236f6b2ba"><rect x="1170.862548828125" y="3727.6998901367188" rx="1px" ry="1px" width="470" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1179.862548828125" y="3746.299890136719"><tspan>events[i].events &amp; (EPOLLRDHUP | EPOLLHUP | EPOLLERR)：处理异常事件</tspan></tspan></text></g></g><g id="384485835c4a"><rect x="1669.1625366210938" y="3673.9998779296875" rx="1px" ry="1px" width="70" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1678.1625366210938" y="3692.599877929688"><tspan>参数解释</tspan></tspan></text></g></g><g id="ede901a9917d"><rect x="1767.1625366210938" y="3638.1998901367188" rx="1px" ry="1px" width="178" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1776.1625366210938" y="3656.799890136719"><tspan>EPOLLERDHUP:表示读关闭</tspan></tspan></text></g></g><g id="e1fe83131c5a"><rect x="1767.1625366210938" y="3673.9998779296875" rx="1px" ry="1px" width="179" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1776.1625366210938" y="3692.599877929688"><tspan>EPOLLHUP:表示读写都关闭</tspan></tspan></text></g></g><g id="006c3b10e763"><rect x="1767.1625366210938" y="3709.7998657226562" rx="1px" ry="1px" width="227" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1776.1625366210938" y="3728.3998657226566"><tspan>EPOLLERR:表示文件描述符发生错误</tspan></tspan></text></g></g><g id="26aa76b2ec4f"><rect x="1669.1625366210938" y="3781.39990234375" rx="1px" ry="1px" width="191" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1678.1625366210938" y="3799.9999023437504"><tspan>调用del_timer(timer, sockfd)</tspan></tspan></text></g></g><g id="3c0cbbfb9321"><rect x="1888.1500854492188" y="3781.39990234375" rx="1px" ry="1px" width="218" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1897.1500854492188" y="3799.9999023437504"><tspan>调用回调函数cb_func()来关闭连接</tspan></tspan></text></g></g><g id="7894b3719e6b"><rect x="2133.5375366210938" y="3745.5999145507812" rx="1px" ry="1px" width="101" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2142.53759765625" y="3764.1999145507816"><tspan>删除epoll事件</tspan></tspan></text></g></g><g id="90bb0c84a45d"><rect x="2133.5375366210938" y="3781.39990234375" rx="1px" ry="1px" width="149" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2142.53759765625" y="3799.9999023437504"><tspan>关闭socket文件描述符</tspan></tspan></text></g></g><g id="2499ad6f6377"><rect x="2133.5375366210938" y="3817.1998901367188" rx="1px" ry="1px" width="130" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2142.53759765625" y="3835.799890136719"><tspan>现有http连接数减1</tspan></tspan></text></g></g><g id="baf3540a1d88"><rect x="1170.862548828125" y="3906.6998901367188" rx="1px" ry="1px" width="594" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1179.862548828125" y="3925.299890136719"><tspan>sockfd == m_pipefd[0]) &amp;&amp; (events[i].events &amp; EPOLLIN)：通过管道接收定时器信号（读事件）</tspan></tspan></text></g></g><g id="ccf9023486b9"><rect x="1792.0625610351562" y="3852.9998779296875" rx="1px" ry="1px" width="356" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1801.0625610351562" y="3871.599877929688"><tspan>主线程仅是接受信号值，业务逻辑处理交由工作线程来处理</tspan></tspan></text></g></g><g id="a473a61bbd31"><rect x="1792.0625610351562" y="3924.5999145507812" rx="1px" ry="1px" width="360" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1801.0625610351562" y="3943.1999145507816"><tspan>调用dealwithsignal(timeout, stop_server)函数来接收信号</tspan></tspan></text></g></g><g id="708175bfbc28"><rect x="2179.8375244140625" y="3888.7998657226562" rx="1px" ry="1px" width="424" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2188.8375244140625" y="3907.3998657226566"><tspan>信号本身是int类型，管道中转递的是ASCLL码表中整型数值对应的字符</tspan></tspan></text></g></g><g id="37fc959ea257"><rect x="2179.8375244140625" y="3942.4998779296875" rx="1px" ry="1px" width="218" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2188.8375244140625" y="3961.099877929688"><tspan>从管道读端m_piped[0]读取信号值</tspan></tspan></text></g></g><g id="d759d66546c8"><rect x="2425.91259765625" y="3924.5999145507812" rx="1px" ry="1px" width="258" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2434.91259765625" y="3943.1999145507816"><tspan>信号为SIGALRM，就设置timeout = true</tspan></tspan></text></g></g><g id="d944cbd83f77"><rect x="2425.91259765625" y="3960.39990234375" rx="1px" ry="1px" width="279" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2434.91259765625" y="3978.9999023437504"><tspan>信号为SIGTERM，就设置stop_server = true</tspan></tspan></text></g></g><g id="799aae3843c5"><rect x="1170.862548828125" y="4193.099884033203" rx="1px" ry="1px" width="317" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1179.862548828125" y="4211.6998840332035"><tspan>events[i].events &amp; EPOLLIN：读取客户端发来数据</tspan></tspan></text></g></g><g id="ab034e32e6bb"><rect x="1515.4750671386719" y="4193.099884033203" rx="1px" ry="1px" width="200" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1524.4750671386719" y="4211.6998840332035"><tspan>调用dealwithread(sockfd)函数</tspan></tspan></text></g></g><g id="3f11c591b52f"><rect x="1743.612548828125" y="4049.89990234375" rx="1px" ry="1px" width="229" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1752.612548828125" y="4068.4999023437504"><tspan>m_actormodel == 1 ：reactor模式</tspan></tspan></text></g></g><g id="144356fa6205"><rect x="2000.5625610351562" y="3996.1998901367188" rx="1px" ry="1px" width="410" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2009.5625610351562" y="4014.799890136719"><tspan>调整sockfd对应定时器在定时器链表中的位置（因为过期时间变了）</tspan></tspan></text></g></g><g id="0f6c5210cfff"><rect x="2000.5625610351562" y="4049.89990234375" rx="1px" ry="1px" width="626" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2009.5625610351562" y="4068.4999023437504"><tspan>调用m_pool-&gt;append(users + sockfd, state)将sockfd对应的http连接添加到工作队列m_workqueue里</tspan></tspan></text></g></g><g id="ebd3455cba12"><rect x="2654.3375244140625" y="4031.9999084472656" rx="1px" ry="1px" width="130" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2663.3375244140625" y="4050.599908447266"><tspan>state=0表示读操作</tspan></tspan></text></g></g><g id="2e78998a4174"><rect x="2654.3375244140625" y="4067.7998962402344" rx="1px" ry="1px" width="130" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2663.3375244140625" y="4086.3998962402347"><tspan>state=1表示写操作</tspan></tspan></text></g></g><g id="3e71b877dd7c"><rect x="2000.5625610351562" y="4103.599884033203" rx="1px" ry="1px" width="268" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2009.5625610351562" y="4122.1998840332035"><tspan>while一直循环直到该http连接的improv=1</tspan></tspan></text></g></g><g id="ed0c4163f1ea"><rect x="2296.3875732421875" y="4103.599884033203" rx="1px" ry="1px" width="608" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2305.3875732421875" y="4122.1998840332035"><tspan>若此时timer_flag=1（读写操作失败），就删除sockfd对应的定时器，接着将improv和timer_flag置零</tspan></tspan></text></g></g><g id="de7641a1df8a"><rect x="1743.612548828125" y="4264.699905395508" rx="1px" ry="1px" width="238" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1752.612548828125" y="4283.299905395508"><tspan>m_actormodel == 0 ：proactor模式</tspan></tspan></text></g></g><g id="38e3f44d093c"><rect x="2009.7500610351562" y="4246.799896240234" rx="1px" ry="1px" width="235" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2018.7500610351562" y="4265.399896240235"><tspan>users[sockfd].read_once()操作成功  </tspan></tspan></text></g></g><g id="6712afb37b42"><rect x="2272.8751220703125" y="4210.999908447266" rx="1px" ry="1px" width="70" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2281.8751220703125" y="4229.599908447266"><tspan>触发模式</tspan></tspan></text></g></g><g id="3ee0aed4cddc"><rect x="2370.8751220703125" y="4157.299896240234" rx="1px" ry="1px" width="62" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2379.8751220703125" y="4175.899896240235"><tspan> LT模式</tspan></tspan></text></g></g><g id="203773cc98d6"><rect x="2460.85009765625" y="4139.39990234375" rx="1px" ry="1px" width="587" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2469.85009765625" y="4157.99990234375"><tspan>epoll_wait检测到文件描述符有事件发生，则将其通知给应用程序，应用程序可以不立即处理该事件</tspan></tspan></text></g></g><g id="ba57e8925259"><rect x="2460.85009765625" y="4175.199890136719" rx="1px" ry="1px" width="507" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2469.85009765625" y="4193.799890136719"><tspan>当下一次调用epoll_wait时，epoll_wait还会再次向应用程序报告此事件，直至被处理</tspan></tspan></text></g></g><g id="d31a9ec57351"><rect x="2370.8751220703125" y="4246.799896240234" rx="1px" ry="1px" width="58" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2379.8751220703125" y="4265.399896240235"><tspan>ET模式</tspan></tspan></text></g></g><g id="9b807dfaa88b"><rect x="2457.47509765625" y="4210.999908447266" rx="1px" ry="1px" width="529" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2466.47509765625" y="4229.599908447266"><tspan>在while循环里一直epoll_wait检测文件描述符，若有事件发生必须通知主程序并立马处理</tspan></tspan></text></g></g><g id="1df80785a900"><rect x="2457.47509765625" y="4246.799896240234" rx="1px" ry="1px" width="391" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2466.47509765625" y="4265.399896240235"><tspan>必须要一次性将数据读取完，使用非阻塞I/O，读取到出现eagain</tspan></tspan></text></g></g><g id="61e69d16e3fe"><rect x="2457.47509765625" y="4282.599899291992" rx="1px" ry="1px" width="673" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2466.47509765625" y="4301.199899291993"><tspan>每次调用recv()将bytes_read个字节数据读到缓冲区后，缓冲区的指针m_read_idx也要向后移动bytes_read个位置</tspan></tspan></text></g></g><g id="ed7ee14ac7ef"><rect x="2272.8751220703125" y="4318.39990234375" rx="1px" ry="1px" width="602" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2281.8751220703125" y="4336.99990234375"><tspan>调用m_pool-&gt;append_p(users + sockfd)将sockfd对应的http连接添加到工作队列m_workqueue里</tspan></tspan></text></g></g><g id="89cdb0adb24b"><rect x="2272.8751220703125" y="4354.199897766113" rx="1px" ry="1px" width="280" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2281.8751220703125" y="4372.799897766114"><tspan>调整sockfd对应定时器在定时器链表中的位置</tspan></tspan></text></g></g><g id="8e1387412f4d"><rect x="2009.7500610351562" y="4389.999900817871" rx="1px" ry="1px" width="398" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2018.7500610351562" y="4408.5999008178715"><tspan>users[sockfd].read_once()操作失败，就删除sockfd对应的定时器</tspan></tspan></text></g></g><g id="4d2fe0feb328"><rect x="1170.862548828125" y="4650.999908447266" rx="1px" ry="1px" width="317" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1179.862548828125" y="4669.599908447266"><tspan>events[i].events &amp; EPOLLOUT：向客户端发送数据</tspan></tspan></text></g></g><g id="9bb1bcc218db"><rect x="1515.8250427246094" y="4650.999908447266" rx="1px" ry="1px" width="203" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1524.8250427246094" y="4669.599908447266"><tspan>调用dealwithwrite(sockfd)函数</tspan></tspan></text></g></g><g id="a545017cf5e7"><rect x="1747.0250854492188" y="4425.799900054932" rx="1px" ry="1px" width="278" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1756.0250854492188" y="4444.399900054932"><tspan>代码结构上和dealwithread(sockfd)保持一致</tspan></tspan></text></g></g><g id="1932363edc09"><rect x="1747.0250854492188" y="4668.89990234375" rx="1px" ry="1px" width="169" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1756.0250854492188" y="4687.49990234375"><tspan>users[sockfd].write()函数</tspan></tspan></text></g></g><g id="538231746210"><rect x="1943.5250854492188" y="4604.799903869629" rx="1px" ry="1px" width="383" height="49" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1952.5250854492188" y="4623.399911499024"><tspan style="font-weight:bolder;">·</tspan><tspan>  内部循环调用writev(m_sockfd, m_iv, m_iv_count)函数</tspan></tspan><tspan x="1952.5250854492188" y="4644.199911499024"><tspan style="font-weight:bolder;">·</tspan><tspan>  writev()函数可以写多个非连续缓冲区，所以又称“聚集写”</tspan></tspan></text></g></g><g id="eebbf1e0843a"><rect x="2354.9500732421875" y="4461.599902153015" rx="1px" ry="1px" width="611" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2363.9500732421875" y="4480.1999021530155"><tspan>若发送缓冲区写满了，调用modfd(m_epollfd, m_sockfd, EPOLLOUT, m_TRIGMode)重新注册写事件 </tspan></tspan></text></g></g><g id="89bbfa003c22"><rect x="2354.9500732421875" y="4497.39990234375" rx="1px" ry="1px" width="419" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2363.9500732421875" y="4515.99990234375"><tspan>若写事件失败了，就调用umap()取消文件内存映射，然后return false</tspan></tspan></text></g></g><g id="1727d93a7f8a"><rect x="2354.9500732421875" y="4650.999908447266" rx="1px" ry="1px" width="96" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2363.9500732421875" y="4669.599908447266"><tspan>若写事件成功</tspan></tspan></text></g></g><g id="73a9f86ccccb"><rect x="2478.9500732421875" y="4533.199901580811" rx="1px" ry="1px" width="405" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2487.9500732421875" y="4551.799901580811"><tspan>更新已发送字节数bytes_have_send和待发送字节数bytes_to_send</tspan></tspan></text></g></g><g id="cd35799f168b"><rect x="2478.9500732421875" y="4597.299903869629" rx="1px" ry="1px" width="484" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2487.9500732421875" y="4615.899903869629"><tspan>若m_iv[0]已经发送完，且正在发送m_iv[1]（可能文件比较大，不能一次就发完）</tspan></tspan></text></g></g><g id="654a9fe6fbb2"><rect x="2991.1500244140625" y="4568.999900817871" rx="1px" ry="1px" width="355" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="3000.1500244140625" y="4587.5999008178715"><tspan>不再继续发送响应报文头部信息，即令m_iv[0].iov_len = 0</tspan></tspan></text></g></g><g id="5f5291252a11"><rect x="2991.1500244140625" y="4604.799903869629" rx="1px" ry="1px" width="464" height="49" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="3000.1500244140625" y="4623.399911499024"><tspan style="font-weight:bolder;">·</tspan><tspan>  将已发送文件数据的大小定为指针偏移量，然后进行指针偏移</tspan></tspan><tspan x="3000.1500244140625" y="4644.199911499024"><tspan style="font-weight:bolder;">·</tspan><tspan>  m_iv[1].iov_base = m_file_address + (bytes_have_send - m_write_idx)</tspan></tspan></text></g></g><g id="b78b905bc1f3"><rect x="2478.9500732421875" y="4661.39990234375" rx="1px" ry="1px" width="440" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2487.9500732421875" y="4679.99990234375"><tspan>若m_iv[0]响应报文头部信息的数据还没发完，则进行指针偏移后继续发送</tspan></tspan></text></g></g><g id="b1bd5815af1d"><rect x="2478.9500732421875" y="4732.999908447266" rx="1px" ry="1px" width="161" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2487.9500732421875" y="4751.599908447266"><tspan>若所有数据全部发送完成</tspan></tspan></text></g></g><g id="05921aecf2eb"><rect x="2667.9500732421875" y="4697.199905395508" rx="1px" ry="1px" width="192" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2676.9500732421875" y="4715.799905395508"><tspan>调用umap()取消文件内存映射</tspan></tspan></text></g></g><g id="b99b5d64db17"><rect x="2667.9500732421875" y="4732.999908447266" rx="1px" ry="1px" width="516" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2676.9500732421875" y="4751.599908447266"><tspan>将原事件重新注册为读事件：modfd(m_epollfd, m_sockfd, EPOLLIN, m_TRIGMode)</tspan></tspan></text></g></g><g id="bf8d7aa97897"><rect x="2667.9500732421875" y="4768.799896240234" rx="1px" ry="1px" width="542" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2676.9500732421875" y="4787.399896240235"><tspan>如果m_linger=1则设置该http连接为优雅关闭（"keep-alive"），并重新初始化该http连接</tspan></tspan></text></g></g><g id="4d6e233fdb87"><rect x="1943.5250854492188" y="4840.39990234375" rx="1px" ry="1px" width="48" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1952.5250854492188" y="4858.99990234375"><tspan>m_iv</tspan></tspan></text></g></g><g id="c7ef2e97ef6c"><rect x="2019.5250854492188" y="4804.599914550781" rx="1px" ry="1px" width="446" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2028.5250854492188" y="4823.199914550782"><tspan>m_iv是一个iovec[2]结构体数组，在项目中写的是响应报文和文件两个部分</tspan></tspan></text></g></g><g id="1b1e3c39c823"><rect x="2019.5250854492188" y="4840.39990234375" rx="1px" ry="1px" width="263" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2028.5250854492188" y="4858.99990234375"><tspan>一个iovec结构体包含成员io_base和io_len</tspan></tspan></text></g></g><g id="d2317186a132"><rect x="2019.5250854492188" y="4876.199920654297" rx="1px" ry="1px" width="380" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="2028.5250854492188" y="4894.799920654297"><tspan>项目中m_iv[0]表示响应报文头部，m_iv[1]表示图片或视频文件</tspan></tspan></text></g></g><g id="e9ee3d18e7bb"><rect x="210.00006103515625" y="2424.099853515625" rx="5px" ry="5px" width="247" height="50" style="fill: #ffffff; stroke:rgb(187,187,187);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="17px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:17px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="221.00006103515625" y="2456.4998535156246"><tspan>事件监听server.eventListen()</tspan></tspan></text></g></g><g id="e237bed93f85"><rect x="485.112548828125" y="1966.999755859375" rx="1px" ry="1px" width="442" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="494.112548828125" y="1985.599755859375"><tspan>服务端创建监听描述符m_listenfd = socket(PF_INET, SOCK_STREAM, 0)</tspan></tspan></text></g></g><g id="b4f7a19acb24"><rect x="485.112548828125" y="2020.699951171875" rx="1px" ry="1px" width="360" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="494.112548828125" y="2039.299951171875"><tspan>根据m_OPT_LINGER的值决定是否优雅关闭（keep-alive）</tspan></tspan></text></g></g><g id="59da1b9c1739"><rect x="873.3750457763672" y="2002.7998046875" rx="1px" ry="1px" width="131" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="882.3750457763672" y="2021.3998046875"><tspan>m_OPT_LINGER=0</tspan></tspan></text></g></g><g id="1c5be17e6825"><rect x="1032.8500442504883" y="2002.7998046875" rx="1px" ry="1px" width="319" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1041.8500442504883" y="2021.3998046875"><tspan>调用close()后socket立即关闭，不管数据有没有发完</tspan></tspan></text></g></g><g id="f2f00c831068"><rect x="873.3750457763672" y="2038.599853515625" rx="1px" ry="1px" width="131" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="882.3750457763672" y="2057.199853515625"><tspan>m_OPT_LINGER=1</tspan></tspan></text></g></g><g id="256389390b6a"><rect x="1032.8500442504883" y="2038.599853515625" rx="1px" ry="1px" width="346" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1041.8500442504883" y="2057.199853515625"><tspan>调用close()后socket会延迟一时间才关闭，直到数据发完</tspan></tspan></text></g></g><g id="7076fcb3ece6"><rect x="485.112548828125" y="2074.39990234375" rx="1px" ry="1px" width="422" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="494.112548828125" y="2092.9999023437504"><tspan>初始化socket信息比如协议簇、ip地址和端口等，然后bind()和listen()</tspan></tspan></text></g></g><g id="e954c2f2fb51"><rect x="485.112548828125" y="2478.599853515625" rx="1px" ry="1px" width="96" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="494.112548828125" y="2497.1998535156254"><tspan>utils类初始化</tspan></tspan></text></g></g><g id="1d44dc31394f"><rect x="608.9125366210938" y="2163.89990234375" rx="1px" ry="1px" width="70" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="617.9125366210938" y="2182.4999023437504"><tspan>成员变量</tspan></tspan></text></g></g><g id="a8d98e6a7ade"><rect x="706.9125366210938" y="2110.199951171875" rx="1px" ry="1px" width="150" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2128.7999511718754"><tspan>u_pipefd：管道描述符</tspan></tspan></text></g></g><g id="c217232400af"><rect x="706.9125366210938" y="2145.999755859375" rx="1px" ry="1px" width="323" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2164.5997558593754"><tspan>m_timer_lst：定时器列表，里面存放着很多个定时器</tspan></tspan></text></g></g><g id="b764eb1223d1"><rect x="706.9125366210938" y="2181.7998046875" rx="1px" ry="1px" width="370" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2200.3998046875004"><tspan>u_epollfd：事件监听创建的那个 epoll描述符，作为参数传入</tspan></tspan></text></g></g><g id="fcb20115cf8e"><rect x="706.9125366210938" y="2217.599853515625" rx="1px" ry="1px" width="402" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2236.1998535156254"><tspan>m_TIMESLOT：定时器到期时间 - 现在的时间 = 3 * m_TIMESLOT</tspan></tspan></text></g></g><g id="4c6bd42827c7"><rect x="608.9125366210938" y="2550.1998291015625" rx="1px" ry="1px" width="70" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="617.9125366210938" y="2568.799829101563"><tspan>成员函数</tspan></tspan></text></g></g><g id="1092b0a2c060"><rect x="706.9125366210938" y="2253.39990234375" rx="1px" ry="1px" width="176" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2271.9999023437504"><tspan>int setnonblocking(int fd)</tspan></tspan></text></g></g><g id="036aa81e76da"><rect x="910.675048828125" y="2253.39990234375" rx="1px" ry="1px" width="522" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="919.675048828125" y="2271.9999023437504"><tspan>对文件描述符设置非阻塞，使得epoll_wait不会一直等有事件发生才返回，而是立即返回</tspan></tspan></text></g></g><g id="2b23e492cb5b"><rect x="706.9125366210938" y="2317.499755859375" rx="1px" ry="1px" width="386" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2336.0997558593754"><tspan>void addfd(int epollfd, int fd, bool one_shot, int TRIGMode)</tspan></tspan></text></g></g><g id="498049dbd1a9"><rect x="1121.7000494003296" y="2289.199951171875" rx="1px" ry="1px" width="492" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1130.7000484466553" y="2307.7999511718754"><tspan>函数的作用是在内核时间表epollfd上注册fd，项目中注册的是读事件，即EPOLLIN</tspan></tspan></text></g></g><g id="d7b8a1bb170a"><rect x="1121.7000494003296" y="2324.999755859375" rx="1px" ry="1px" width="584" height="49" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1130.7000484466553" y="2343.5997558593754"><tspan style="font-weight:bolder;">·</tspan><tspan>  EPOLLONESHOT使得对应的事件只会被触发一次，保证了一个socket不会被多个线程同时占用</tspan></tspan><tspan x="1130.7000484466553" y="2364.3997558593755"><tspan style="font-weight:bolder;">·</tspan><tspan>  想重新注册事件则需要调用epoll_ctl重置文件描述符上的事件</tspan></tspan></text></g></g><g id="ef6a3216ebd1"><rect x="706.9125366210938" y="2399.499755859375" rx="1px" ry="1px" width="203" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2418.0997558593754"><tspan>static void sig_handler(int sig)</tspan></tspan></text></g></g><g id="ca54ee87f476"><rect x="937.9125518798828" y="2399.499755859375" rx="1px" ry="1px" width="272" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="946.9125518798828" y="2418.0997558593754"><tspan>将信号值sig通过管道u_pipefd发送给主进程</tspan></tspan></text></g></g><g id="29c8e81a4faf"><rect x="1237.8125534057617" y="2381.599853515625" rx="1px" ry="1px" width="114" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1246.8125457763672" y="2400.1998535156254"><tspan>写端u_pipefd[1]</tspan></tspan></text></g></g><g id="2f5a591d55ad"><rect x="1380.2250671386719" y="2381.599853515625" rx="1px" ry="1px" width="590" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1389.2250671386719" y="2400.1998535156254"><tspan>写端设置为非阻塞：如果缓冲区满了，线程就会阻塞，这时候会进一步增加信号处理函数的执行时间</tspan></tspan></text></g></g><g id="7174b7c1f92c"><rect x="1237.8125534057617" y="2417.39990234375" rx="1px" ry="1px" width="114" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1246.8125457763672" y="2435.9999023437504"><tspan>读端u_pipefd[0]</tspan></tspan></text></g></g><g id="4b3acd302f43"><rect x="1380.2250671386719" y="2417.39990234375" rx="1px" ry="1px" width="137" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1389.2250671386719" y="2435.9999023437504"><tspan>设置读端为ET非阻塞</tspan></tspan></text></g></g><g id="a5b6c3ccb94e"><rect x="706.9125366210938" y="2542.6998291015625" rx="1px" ry="1px" width="374" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2561.299829101563"><tspan>void addsig(int sig, void(handler)(int), bool restart = true)</tspan></tspan></text></g></g><g id="b0ffb411bdbe"><rect x="1108.550048828125" y="2488.9998779296875" rx="1px" ry="1px" width="109" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1117.550048828125" y="2507.599877929688"><tspan>子设置信号函数</tspan></tspan></text></g></g><g id="bbc379ecd2a8"><rect x="1245.550048828125" y="2453.1998291015625" rx="1px" ry="1px" width="66" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1254.550048828125" y="2471.799829101563"><tspan>SIGPIPE</tspan></tspan></text></g></g><g id="3d5282711d7b"><rect x="1339.425048828125" y="2453.1998291015625" rx="1px" ry="1px" width="357" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1348.425048828125" y="2471.799829101563"><tspan>向一个已单向close的client调用两次write就会触发SIGPIPE</tspan></tspan></text></g></g><g id="1844e658a255"><rect x="1245.550048828125" y="2488.9998779296875" rx="1px" ry="1px" width="74" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1254.550048828125" y="2507.599877929688"><tspan>SIGTERM</tspan></tspan></text></g></g><g id="a828c28363a3"><rect x="1348.3375549316406" y="2488.9998779296875" rx="1px" ry="1px" width="338" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1357.3375549316406" y="2507.599877929688"><tspan>隔一段时间就发送SIGALRM，主线程通过u_pipefd接收</tspan></tspan></text></g></g><g id="5c37f5b28b00"><rect x="1245.550048828125" y="2524.7999267578125" rx="1px" ry="1px" width="76" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1254.550048828125" y="2543.399926757813"><tspan>SIGALRM</tspan></tspan></text></g></g><g id="6a02fb496dcd"><rect x="1349.550048828125" y="2524.7999267578125" rx="1px" ry="1px" width="166" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1358.550048828125" y="2543.399926757813"><tspan>SIGTERM是程序终止信号</tspan></tspan></text></g></g><g id="20e9b0453fbf"><rect x="1108.550048828125" y="2560.599853515625" rx="1px" ry="1px" width="317" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1117.550048828125" y="2579.1998535156254"><tspan>信号处理函数中仅仅发送信号值，不做对应逻辑处理</tspan></tspan></text></g></g><g id="14e2a4494aef"><rect x="1108.550048828125" y="2596.39990234375" rx="1px" ry="1px" width="422" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1117.550048828125" y="2614.9999023437504"><tspan>restart对应参数SA_RESTART，使被信号打断的系统调用自动重新发起</tspan></tspan></text></g></g><g id="d39e95dc1434"><rect x="1108.550048828125" y="2632.1998291015625" rx="1px" ry="1px" width="226" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1117.550048828125" y="2650.799829101563"><tspan>也可以通过sa_mask来屏蔽某些信号</tspan></tspan></text></g></g><g id="8282e7460acd"><rect x="706.9125366210938" y="2739.599853515625" rx="1px" ry="1px" width="143" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2758.1998535156254"><tspan>void timer_handler()</tspan></tspan></text></g></g><g id="e975b852c700"><rect x="878.2750396728516" y="2721.6998291015625" rx="1px" ry="1px" width="306" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="887.2750396728516" y="2740.299829101563"><tspan>调用定时器列表 m_timer_lst的任务处理函数tick()</tspan></tspan></text></g></g><g id="ed4fc6960972"><rect x="1211.6875534057617" y="2667.9998779296875" rx="1px" ry="1px" width="316" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1220.6875534057617" y="2686.599877929688"><tspan>根据定时器的类内成员expire来判断定时器是否到期</tspan></tspan></text></g></g><g id="44c205ddeaa4"><rect x="1211.6875534057617" y="2739.599853515625" rx="1px" ry="1px" width="317" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1220.6875534057617" y="2758.1998535156254"><tspan>若当前定时器到期，则调用回调函数，执行相应操作</tspan></tspan></text></g></g><g id="a25c934dc660"><rect x="1556.6875610351562" y="2703.7999267578125" rx="1px" ry="1px" width="127" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1565.6875610351562" y="2722.399926757813"><tspan>删除epoll注册事件</tspan></tspan></text></g></g><g id="044326f2e6d9"><rect x="1556.6875610351562" y="2739.599853515625" rx="1px" ry="1px" width="188" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1565.6875610351562" y="2758.1998535156254"><tspan>关闭客户端socket文件描述符</tspan></tspan></text></g></g><g id="593cf4a16db5"><rect x="1556.6875610351562" y="2775.39990234375" rx="1px" ry="1px" width="117" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1565.6875610351562" y="2793.9999023437504"><tspan>客户端连接数减1</tspan></tspan></text></g></g><g id="bf372370a716"><rect x="878.2750396728516" y="2811.1998291015625" rx="1px" ry="1px" width="409" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="887.2750396728516" y="2829.799829101563"><tspan>定时处理任务，调用alarm(m_TIMESLOT)周期性触发SIGALRM信号</tspan></tspan></text></g></g><g id="7c988483864e"><rect x="706.9125366210938" y="2846.9998779296875" rx="1px" ry="1px" width="295" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="715.9125366210938" y="2865.599877929688"><tspan>void show_error(int connfd, const char *info)</tspan></tspan></text></g></g><g id="72dbbfb24cc9"><rect x="1030.1625442504883" y="2846.9998779296875" rx="1px" ry="1px" width="279" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1039.1625442504883" y="2865.599877929688"><tspan>发送错误信息到客户端后，关闭客户端socket</tspan></tspan></text></g></g><g id="cb8119b1c662"><rect x="485.112548828125" y="2893.1998291015625" rx="1px" ry="1px" width="140" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="494.112548828125" y="2911.799829101563"><tspan>创建epoll内核事件表</tspan></tspan></text></g></g><g id="ab6649c3f807"><rect x="652.9750366210938" y="2882.7999267578125" rx="1px" ry="1px" width="302" height="49" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="661.9750366210938" y="2901.399926757813"><tspan style="font-weight:bolder;">·</tspan><tspan>  epoll_event events[MAX_EVENT_NUMBER]</tspan></tspan><tspan x="661.9750366210938" y="2922.199926757813"><tspan style="font-weight:bolder;">·</tspan><tspan>  m_epollfd = epoll_create(5)</tspan></tspan></text></g></g><g id="e954006bb31a"><rect x="210.00006103515625" y="1848.499755859375" rx="5px" ry="5px" width="238" height="50" style="fill: #ffffff; stroke:rgb(187,187,187);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="17px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:17px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="221.00006103515625" y="1880.899755859375"><tspan>触发模式server.trig_mode()</tspan></tspan></text></g></g><g id="3566ea968514"><rect x="475.62506103515625" y="1859.699951171875" rx="1px" ry="1px" width="208" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="484.62506103515625" y="1878.299951171875"><tspan>决定listenfd+connfd的触发模式</tspan></tspan></text></g></g><g id="fda43886fb78"><rect x="711.8875427246094" y="1805.999755859375" rx="1px" ry="1px" width="119" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="720.8875427246094" y="1824.599755859375"><tspan>m_TRIGMode=0</tspan></tspan></text></g></g><g id="f1281049869a"><rect x="859.2500457763672" y="1805.999755859375" rx="1px" ry="1px" width="63" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="868.2500457763672" y="1824.599755859375"><tspan>LT + LT</tspan></tspan></text></g></g><g id="0111e9a98246"><rect x="711.8875427246094" y="1841.7998046875" rx="1px" ry="1px" width="119" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="720.8875427246094" y="1860.3998046875"><tspan>m_TRIGMode=1</tspan></tspan></text></g></g><g id="22fd6cf566dc"><rect x="859.2500457763672" y="1841.7998046875" rx="1px" ry="1px" width="64" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="868.2500457763672" y="1860.3998046875"><tspan>LT + ET</tspan></tspan></text></g></g><g id="b0e8cc5d9e99"><rect x="711.8875427246094" y="1877.599853515625" rx="1px" ry="1px" width="119" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="720.8875427246094" y="1896.199853515625"><tspan>m_TRIGMode=2</tspan></tspan></text></g></g><g id="65efafe4c16b"><rect x="859.2500457763672" y="1877.599853515625" rx="1px" ry="1px" width="64" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="868.2500457763672" y="1896.199853515625"><tspan>ET + LT</tspan></tspan></text></g></g><g id="1ca82ed8c91d"><rect x="711.8875427246094" y="1913.39990234375" rx="1px" ry="1px" width="119" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="720.8875427246094" y="1931.99990234375"><tspan>m_TRIGMode=3</tspan></tspan></text></g></g><g id="30fc212dffc6"><rect x="859.2500457763672" y="1913.39990234375" rx="1px" ry="1px" width="65" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="868.2500457763672" y="1931.99990234375"><tspan>ET + ET</tspan></tspan></text></g></g><g id="9fd9b912a80d"><rect x="210.00006103515625" y="1347.599853515625" rx="5px" ry="5px" width="235" height="50" style="fill: #ffffff; stroke:rgb(187,187,187);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="17px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:17px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="221.00006103515625" y="1379.999853515625"><tspan>线程池server.thread_pool()</tspan></tspan></text></g></g><g id="c90e212174a8"><rect x="473.35003662109375" y="1358.7998046875" rx="1px" ry="1px" width="490" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="482.35003662109375" y="1377.3998046875"><tspan>threadpool&lt;http_conn&gt;(m_actormodel, m_connPool, m_thread_num)线程池</tspan></tspan></text></g></g><g id="359ddfe0844d"><rect x="990.7500457763672" y="1000.7998046875" rx="1px" ry="1px" width="48" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="999.7500457763672" y="1019.3998046874999"><tspan>参数</tspan></tspan></text></g></g><g id="4fbff3e25b3e"><rect x="1066.7500495910645" y="964.999755859375" rx="1px" ry="1px" width="214" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1075.7500495910645" y="983.5997558593749"><tspan>m_actormodel决定是用LT还是ET</tspan></tspan></text></g></g><g id="0e8411c59c24"><rect x="1066.7500495910645" y="1000.7998046875" rx="1px" ry="1px" width="225" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1075.7500495910645" y="1019.3998046874999"><tspan>m_connPool对应一个数据库连接池</tspan></tspan></text></g></g><g id="1efb2c781a93"><rect x="1066.7500495910645" y="1036.599853515625" rx="1px" ry="1px" width="176" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1075.7500495910645" y="1055.199853515625"><tspan>m_thread_num表示线程数</tspan></tspan></text></g></g><g id="5e90932dee68"><rect x="990.7500457763672" y="1108.199951171875" rx="1px" ry="1px" width="198" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="999.7500457763672" y="1126.799951171875"><tspan>threadpool&lt;T&gt;::threadpool()</tspan></tspan></text></g></g><g id="4182cc5d70a8"><rect x="1216.400047302246" y="1072.39990234375" rx="1px" ry="1px" width="174" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1225.400047302246" y="1090.99990234375"><tspan>初始化时完成一些赋值操作</tspan></tspan></text></g></g><g id="2db4b4608b73"><rect x="1216.400047302246" y="1108.199951171875" rx="1px" ry="1px" width="518" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1225.400047302246" y="1126.799951171875"><tspan>pthread_t[m_thread_number]数组结合pthread_create函数，在for循环里建立线程池</tspan></tspan></text></g></g><g id="2b0635c120ac"><rect x="1216.400047302246" y="1143.999755859375" rx="1px" ry="1px" width="466" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1225.400047302246" y="1162.599755859375"><tspan>pthread_detach使线程变成unjoinable状态，等线程结束时就会自动释放资源</tspan></tspan></text></g></g><g id="19e849d9995b"><rect x="990.7500457763672" y="1197.699951171875" rx="1px" ry="1px" width="207" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="999.7500457763672" y="1216.299951171875"><tspan>threadpool&lt;T&gt;::~threadpool()</tspan></tspan></text></g></g><g id="5cd8919dc1a5"><rect x="1226.0375518798828" y="1179.7998046875" rx="1px" ry="1px" width="109" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1235.0375518798828" y="1198.3998046875"><tspan>线程池析构函数</tspan></tspan></text></g></g><g id="2d60576e649d"><rect x="1226.0375518798828" y="1215.599853515625" rx="1px" ry="1px" width="302" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1235.0375518798828" y="1234.199853515625"><tspan>delete[] m_threads通过delete线程池数组来实现</tspan></tspan></text></g></g><g id="dafa7fc35578"><rect x="990.7500457763672" y="1269.2998046875" rx="1px" ry="1px" width="298" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="999.7500457763672" y="1287.8998046875"><tspan>threadpool&lt;T&gt;::append(T *request, int state)</tspan></tspan></text></g></g><g id="535cbe2b4aad"><rect x="1316.425048828125" y="1251.39990234375" rx="1px" ry="1px" width="451" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1325.425048828125" y="1269.99990234375"><tspan>作用是向请求队列m_workqueue添加一个request，进行操作之前要先上锁</tspan></tspan></text></g></g><g id="e2841401d101"><rect x="1316.425048828125" y="1287.199951171875" rx="1px" ry="1px" width="199" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1325.425048828125" y="1305.799951171875"><tspan>并设置request的状态码为state</tspan></tspan></text></g></g><g id="b0fdd4be9732"><rect x="990.7500457763672" y="1322.999755859375" rx="1px" ry="1px" width="254" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="999.7500457763672" y="1341.599755859375"><tspan>threadpool&lt;T&gt;::append_p(T *request)</tspan></tspan></text></g></g><g id="81407cacec63"><rect x="1273.1500549316406" y="1322.999755859375" rx="1px" ry="1px" width="484" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1282.1500549316406" y="1341.599755859375"><tspan>与threadpool&lt;T&gt;::append(T *request, int state)操作一样，只是没有state参数</tspan></tspan></text></g></g><g id="511a386ba583"><rect x="990.7500457763672" y="1555.699951171875" rx="1px" ry="1px" width="200" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="999.7500457763672" y="1574.299951171875"><tspan>static void* worker(void *arg)</tspan></tspan></text></g></g><g id="bb26203727cf"><rect x="1218.7875518798828" y="1358.7998046875" rx="1px" ry="1px" width="371" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1227.7875518798828" y="1377.3998046875"><tspan>是一个静态成员函数，设为静态目的避免pthread_create陷阱</tspan></tspan></text></g></g><g id="3ad41dba487c"><rect x="1218.7875518798828" y="1394.599853515625" rx="1px" ry="1px" width="752" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1227.7875518798828" y="1413.199853515625"><tspan>线程池m_threads中的每一个线程都对应一个woker函数,worker函数像是一个桥梁，使得所有的线程都可以安全访问到类内资源</tspan></tspan></text></g></g><g id="8015cffbe998"><rect x="1218.7875518798828" y="1430.39990234375" rx="1px" ry="1px" width="688" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1227.7875518798828" y="1448.99990234375"><tspan>线程池m_threads中的所有线程通过worker函数内部调用run(),共同并互斥地管理一个客户端请求队列m_workqueue</tspan></tspan></text></g></g><g id="9f36dd431849"><rect x="1218.7875518798828" y="1609.39990234375" rx="1px" ry="1px" width="48" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1227.7875518798828" y="1627.99990234375"><tspan>run()</tspan></tspan></text></g></g><g id="58f34a79ebb7"><rect x="1294.7875518798828" y="1466.199951171875" rx="1px" ry="1px" width="340" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1303.7875518798828" y="1484.799951171875"><tspan>通过出队列操作获取m_workqueue中的首个客户端连接</tspan></tspan></text></g></g><g id="c4ae132b22a2"><rect x="1294.7875518798828" y="1627.2998046875" rx="1px" ry="1px" width="114" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1303.7875518798828" y="1645.8998046875"><tspan>m_actor_model</tspan></tspan></text></g></g><g id="e7741b378e9f"><rect x="1436.0000610351562" y="1555.699951171875" rx="1px" ry="1px" width="70" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1445.0000610351562" y="1574.299951171875"><tspan>两种模式</tspan></tspan></text></g></g><g id="5ddc65b1c785"><rect x="1534.0000610351562" y="1519.89990234375" rx="1px" ry="1px" width="88" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1543.0000610351562" y="1538.49990234375"><tspan>reactor模式</tspan></tspan></text></g></g><g id="b35eb765edfa"><rect x="1650.1250610351562" y="1501.999755859375" rx="1px" ry="1px" width="460" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1659.1250610351562" y="1520.599755859375"><tspan>主线程：只负责监听文件描述符上是否有事件发生，有的话立即通知工作线程</tspan></tspan></text></g></g><g id="bf8c95c65f9a"><rect x="1650.1250610351562" y="1537.7998046875" rx="1px" ry="1px" width="616" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1659.1250610351562" y="1556.3998046875"><tspan>工作线程：读写数据、接受新连接及处理客户请求（比如解析报文和生成响应报文）均在工作线程中完成</tspan></tspan></text></g></g><g id="7478b30924ff"><rect x="1534.0000610351562" y="1591.499755859375" rx="1px" ry="1px" width="98" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1543.0000610351562" y="1610.099755859375"><tspan>proactor模式</tspan></tspan></text></g></g><g id="f38171edf2d7"><rect x="1659.3125610351562" y="1573.599853515625" rx="1px" ry="1px" width="337" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1668.3125610351562" y="1592.199853515625"><tspan>主线程：协同内核处理读写数据、接受新连接等I/O操作</tspan></tspan></text></g></g><g id="d2be623d36ad"><rect x="1659.3125610351562" y="1609.39990234375" rx="1px" ry="1px" width="395" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1668.3125610351562" y="1627.99990234375"><tspan>工作线程：仅负责处理客户请求（比如解析报文和生成响应报文）</tspan></tspan></text></g></g><g id="b120ee459601"><rect x="1436.0000610351562" y="1680.999755859375" rx="1px" ry="1px" width="122" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1445.0000610351562" y="1699.599755859375"><tspan>1表示reactor模式</tspan></tspan></text></g></g><g id="c34419e9901f"><rect x="1585.7500610351562" y="1645.199951171875" rx="1px" ry="1px" width="358" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1594.7500610351562" y="1663.799951171875"><tspan>主线程和工作线程通过变量improv和timer_flag来传递信息</tspan></tspan></text></g></g><g id="99db33462c0e"><rect x="1585.7500610351562" y="1680.999755859375" rx="1px" ry="1px" width="494" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1594.7500610351562" y="1699.599755859375"><tspan>当进行了read_once()或write()操作之后，不管读写是否成功，improv都会被置为1</tspan></tspan></text></g></g><g id="2b916c10143d"><rect x="1585.7500610351562" y="1716.7998046875" rx="1px" ry="1px" width="571" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1594.7500610351562" y="1735.3998046875"><tspan>当read_once()或write()任一个操作失败后，timer_flag就会置为1，然后删除对应的定时器并置0</tspan></tspan></text></g></g><g id="1f934665d262"><rect x="1436.0000610351562" y="1752.599853515625" rx="1px" ry="1px" width="131" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1445.0000610351562" y="1771.199853515625"><tspan>0表示proactor模式</tspan></tspan></text></g></g><g id="b5825f26463f"><rect x="210.00006103515625" y="775.099853515625" rx="5px" ry="5px" width="206" height="50" style="fill: #ffffff; stroke:rgb(187,187,187);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="17px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:17px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="221.00006103515625" y="807.4998535156251"><tspan>数据库server.sql_pool()</tspan></tspan></text></g></g><g id="3c889794a6db"><rect x="443.4000244140625" y="660.999755859375" rx="1px" ry="1px" width="468" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="452.4000244140625" y="679.5997558593749"><tspan>static connection_pool::GetInstance()函数通过单例懒汉模式返回连接池实例</tspan></tspan></text></g></g><g id="2a22aa11f8a2"><rect x="443.4000244140625" y="732.599853515625" rx="1px" ry="1px" width="56" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="452.4000244140625" y="751.1998535156249"><tspan>init(...)</tspan></tspan></text></g></g><g id="821ffc538a62"><rect x="527.2500610351562" y="696.7998046875" rx="1px" ry="1px" width="122" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="536.2500610351562" y="715.3998046874999"><tspan>初始化数据库信息</tspan></tspan></text></g></g><g id="96932aa48401"><rect x="527.2500610351562" y="732.599853515625" rx="1px" ry="1px" width="286" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="536.2500610351562" y="751.1998535156249"><tspan>创建MaxConn条数据库连接并放入一个链表里</tspan></tspan></text></g></g><g id="1b8158ca9745"><rect x="527.2500610351562" y="768.39990234375" rx="1px" ry="1px" width="200" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="536.2500610351562" y="786.9999023437499"><tspan>将信号量初始化为最大连接次数</tspan></tspan></text></g></g><g id="202f3e64cd52"><rect x="443.4000244140625" y="857.89990234375" rx="1px" ry="1px" width="248" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="452.4000244140625" y="876.4999023437499"><tspan>users-&gt;initmysql_result(m_connPool)</tspan></tspan></text></g></g><g id="55bdf2d7bc38"><rect x="719.6250305175781" y="804.199951171875" rx="1px" ry="1px" width="171" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="728.6250305175781" y="822.7999511718749"><tspan>users是一个 http连接实例</tspan></tspan></text></g></g><g id="658de7bdab40"><rect x="719.6250305175781" y="839.999755859375" rx="1px" ry="1px" width="430" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="728.6250305175781" y="858.5997558593749"><tspan>函数原型为http_conn::initmysql_result(connection_pool *connPool)</tspan></tspan></text></g></g><g id="d959454cd69a"><rect x="719.6250305175781" y="893.699951171875" rx="1px" ry="1px" width="48" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="728.6250305175781" y="912.2999511718749"><tspan>功能</tspan></tspan></text></g></g><g id="b800798059f0"><rect x="795.6250305175781" y="875.7998046875" rx="1px" ry="1px" width="426" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="804.6250305175781" y="894.3998046874999"><tspan>创建一个RAII机制的数据库连接池，并从中取出一个空闲的MySQL连接</tspan></tspan></text></g></g><g id="febec67878ca"><rect x="795.6250305175781" y="911.599853515625" rx="1px" ry="1px" width="476" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="804.6250305175781" y="930.1998535156249"><tspan>从本地MySQL数据库通过CGI校验提取出用户名及密码，然后存入一个map里面</tspan></tspan></text></g></g><g id="94dbd88a7ebf"><rect x="210.00006103515625" y="345.39990234375" rx="5px" ry="5px" width="195" height="50" style="fill: #ffffff; stroke:rgb(187,187,187);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="17px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:17px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="221.00006103515625" y="377.79990234375"><tspan>日志server.log_write()</tspan></tspan></text></g></g><g id="b669a6925e6e"><rect x="432.76251220703125" y="285" rx="1px" ry="1px" width="174" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="441.76251220703125" y="303.6"><tspan>static Log *get_instance()</tspan></tspan></text></g></g><g id="17579ed04a75"><rect x="634.9625549316406" y="106" rx="1px" ry="1px" width="261" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="643.9625549316406" y="124.6"><tspan>get_instance()通过单例懒汉模式返回实例</tspan></tspan></text></g></g><g id="913f51026a71"><rect x="634.9625549316406" y="213.39990234375" rx="1px" ry="1px" width="48" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="643.9625549316406" y="231.99990234375002"><tspan>init()</tspan></tspan></text></g></g><g id="d25c4b445eac"><rect x="710.9625549316406" y="141.7998046875" rx="1px" ry="1px" width="153" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="719.9625549316406" y="160.39980468750002"><tspan>m_log_queue阻塞队列</tspan></tspan></text></g></g><g id="6a0020e17384"><rect x="891.9375457763672" y="141.7998046875" rx="1px" ry="1px" width="161" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="900.9375457763672" y="160.39980468750002"><tspan>用来存放若干条日志信息</tspan></tspan></text></g></g><g id="0a4da854f2bd"><rect x="710.9625549316406" y="231.2998046875" rx="1px" ry="1px" width="251" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="719.9625549316406" y="249.89980468750002"><tspan>pthread_create(...,flush_log_thread, ...)</tspan></tspan></text></g></g><g id="bcdddd941e42"><rect x="990.0000457763672" y="177.599609375" rx="1px" ry="1px" width="410" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="999.0000457763672" y="196.19960937500002"><tspan>flush_log_thread内部调用Log::get_instance()-&gt;async_write_log()</tspan></tspan></text></g></g><g id="deee513bcb67"><rect x="990.0000457763672" y="249.19970703125" rx="1px" ry="1px" width="124" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="999.0000457763672" y="267.79970703125"><tspan>async_write_log()</tspan></tspan></text></g></g><g id="7f4b33b73694"><rect x="1141.9000492095947" y="213.39990234375" rx="1px" ry="1px" width="408" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1150.9000511169434" y="231.99990234375002"><tspan>生成日志信息时，先把该条日志放入阻塞队列，这一点与同步写不同</tspan></tspan></text></g></g><g id="e07d8b6b8f8c"><rect x="1141.9000492095947" y="249.19970703125" rx="1px" ry="1px" width="381" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1150.9000511169434" y="267.79970703125"><tspan>只要阻塞队列里面有内容，这个线程就会将里面的内容pop出来</tspan></tspan></text></g></g><g id="633e304f9753"><rect x="1141.9000492095947" y="285" rx="1px" ry="1px" width="291" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1150.9000511169434" y="303.6"><tspan>要是阻塞队列为空，当前线程就会等待条件变量</tspan></tspan></text></g></g><g id="909a9cae7eba"><rect x="634.9625549316406" y="392.39990234375" rx="1px" ry="1px" width="271" height="27" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="643.9625549316406" y="410.99990234375"><tspan>write_log(int level, const char *format, ...)</tspan></tspan></text></g></g><g id="08fb49762f48"><rect x="934.300048828125" y="320.7998046875" rx="1px" ry="1px" width="150" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="943.300048828125" y="339.3998046875"><tspan>level决定日志信息类别</tspan></tspan></text></g></g><g id="5d3038064435"><rect x="934.300048828125" y="374.5" rx="1px" ry="1px" width="83" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="943.300048828125" y="393.1"><tspan>同步写日志</tspan></tspan></text></g></g><g id="e4e460b8730d"><rect x="1045.300048828125" y="356.599609375" rx="1px" ry="1px" width="154" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1054.300048828125" y="375.199609375"><tspan>此时m_is_async为false</tspan></tspan></text></g></g><g id="0149d5a7c4bc"><rect x="1045.300048828125" y="392.39990234375" rx="1px" ry="1px" width="454" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1054.300048828125" y="410.99990234375"><tspan>在主进程中进行，先用fputs写到缓冲区，再用fflush()强制更新到.log文件里</tspan></tspan></text></g></g><g id="b548dba10dde"><rect x="934.300048828125" y="446.099853515625" rx="1px" ry="1px" width="83" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="943.300048828125" y="464.699853515625"><tspan>异步写日志</tspan></tspan></text></g></g><g id="a4d9781eaf7e"><rect x="1045.300048828125" y="428.199951171875" rx="1px" ry="1px" width="150" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1054.300048828125" y="446.799951171875"><tspan>此时m_is_async为true</tspan></tspan></text></g></g><g id="02c7f14f25b1"><rect x="1045.300048828125" y="463.999755859375" rx="1px" ry="1px" width="267" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="1054.300048828125" y="482.599755859375"><tspan>由单独的线程调用async_write_log()来负责</tspan></tspan></text></g></g><g id="0ae1f2735d26"><rect x="432.76251220703125" y="553.499755859375" rx="1px" ry="1px" width="130" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="441.76251220703125" y="572.0997558593749"><tspan>具体实现的4种方式</tspan></tspan></text></g></g><g id="8baffc977ed2"><rect x="590.3875122070312" y="499.7998046875" rx="1px" ry="1px" width="162" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="599.3875122070312" y="518.3998046875"><tspan>LOG_DEBUG(format, ...)</tspan></tspan></text></g></g><g id="483ba20ee6a2"><rect x="590.3875122070312" y="535.599853515625" rx="1px" ry="1px" width="150" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="599.3875122070312" y="554.1998535156249"><tspan>LOG_INFO(format, ...)</tspan></tspan></text></g></g><g id="858b3e13d078"><rect x="590.3875122070312" y="571.39990234375" rx="1px" ry="1px" width="159" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="599.3875122070312" y="589.9999023437499"><tspan>LOG_WARN(format, ...)</tspan></tspan></text></g></g><g id="2c8e702d5af6"><rect x="590.3875122070312" y="607.199951171875" rx="1px" ry="1px" width="161" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="599.3875122070312" y="625.7999511718749"><tspan>LOG_ERROR(format, ...)</tspan></tspan></text></g></g><g id="15a36b69c674"><rect x="210.00006103515625" y="30" rx="5px" ry="5px" width="163" height="50" style="fill: #ffffff; stroke:rgb(187,187,187);stroke-width:1px;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="17px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:17px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="221.00006103515625" y="62.400000000000006"><tspan>初始化server.init()</tspan></tspan></text></g></g><g id="92e820dc756a"><rect x="401.37506103515625" y="41.19970703125" rx="1px" ry="1px" width="434" height="28" style="fill: transparent; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="13px" font-weight="normal" fill="rgb(68, 68, 68)" style="font-size:13px;font-family:微软雅黑;color:rgb(68,68,68);font-style:normal;text-align:left;font-weight:normal;"><tspan x="410.37506103515625" y="59.799707031249994"><tspan>根据函数参数初始化类内成员，比如端口号、数据库信息以及工作模式等</tspan></tspan></text></g></g><g transform="translate(210.00006103515625, 2957.9998779296875)" id="sdjakdjak0"><g id="subline_6de03c54d26e" transform="translate(0.5,0.5)"><path id="line_a7cc84062c40" d="M 240.73737511268027 973.0000187800481 L 259 973.0000187800481 L 259 972.9999630267804 L 268.73741736778845 972.9999630267804" p="6de03c54d26e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ce55f59403f5" d="M 577.7124727689303 972.9999630267804 L 596 972.9999630267804 L 596 53.69996965848482 A 4 4 0 0 1 600 49.69996965848482 L 605.7125150240385 49.69996965848482" p="a7cc84062c40" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f22c96d467d1" d="M 970.9250347430889 49.69996965848482 L 989 49.69996965848482 L 989 17.900015904353214 A 4 4 0 0 1 993 13.900015904353214 L 998.9250300480769 13.900015904353214" p="ce55f59403f5" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_58e5f7ef1074" d="M 970.9250347430889 49.69996965848482 L 989 49.69996965848482 L 989 49.69996965848482 L 998.9250300480769 49.69996965848482" p="ce55f59403f5" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_698c1c1bd7e2" d="M 970.9250347430889 49.69996965848482 L 989 49.69996965848482 L 989 81.49988820002629 A 4 4 0 0 0 993 85.49988820002629 L 998.9250300480769 85.49988820002629" p="ce55f59403f5" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a511f651d2af" d="M 577.7124727689303 972.9999630267804 L 596 972.9999630267804 L 596 1022.6999420752891 A 4 4 0 0 0 600 1026.699942075289 L 605.7125150240385 1026.699942075289" p="a7cc84062c40" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_23a105758e23" d="M 932.8625253530649 1026.699942075289 L 951 1026.699942075289 L 951 393.79995580819934 A 4 4 0 0 1 955 389.79995580819934 L 960.8624737079326 389.79995580819934" p="a511f651d2af" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ee595a178bab" d="M 1230.8999633789062 389.79995580819934 L 1249 389.79995580819934 L 1249 389.79995580819934 L 1258.9000056340144 389.79995580819934" p="23a105758e23" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5d78e5208532" d="M 1438.12498826247 389.79995580819934 L 1457 389.79995580819934 L 1457 125.29991824810321 A 4 4 0 0 1 1461 121.29991824810321 L 1466.1249718299277 121.29991824810321" p="ee595a178bab" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cd30c69a178d" d="M 1438.12498826247 389.79995580819934 L 1457 389.79995580819934 L 1457 375.89990263718823 A 4 4 0 0 1 1461 371.89990263718823 L 1466.1249718299277 371.89990263718823" p="ee595a178bab" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_234c894553f2" d="M 1754.9249971829927 371.89990263718823 L 1773 371.89990263718823 L 1773 178.9998694199782 A 4 4 0 0 1 1777 174.9998694199782 L 1782.9250159630408 174.9998694199782" p="cd30c69a178d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2c06ef820792" d="M 1917.9250159630408 174.9998694199782 L 1936 174.9998694199782 L 1936 161.09994829618012 A 4 4 0 0 1 1940 157.09994829618012 L 1945.9250142024114 157.09994829618012" p="234c894553f2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_788e1ba62860" d="M 1917.9250159630408 174.9998694199782 L 1936 174.9998694199782 L 1936 188.89997834425705 A 4 4 0 0 0 1940 192.89997834425705 L 1945.9250142024114 192.89997834425705" p="234c894553f2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b3e18f533d5b" d="M 1754.9249971829927 371.89990263718823 L 1773 371.89990263718823 L 1773 385.79995580819934 A 4 4 0 0 0 1777 389.79995580819934 L 1782.9250159630408 389.79995580819934" p="cd30c69a178d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1f57af2b707f" d="M 1930.9250230055588 389.79995580819934 L 1949 389.79995580819934 L 1949 232.69997024536133 A 4 4 0 0 1 1953 228.69997024536133 L 1958.9250153761643 228.69997024536133" p="b3e18f533d5b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f3b2f1bcef03" d="M 1930.9250230055588 389.79995580819934 L 1949 389.79995580819934 L 1949 268.4999063931979 A 4 4 0 0 1 1953 264.4999063931979 L 1958.9250153761643 264.4999063931979" p="b3e18f533d5b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c6d3d4084cf2" d="M 1930.9250230055588 389.79995580819934 L 1949 389.79995580819934 L 1949 340.099910736084 A 4 4 0 0 1 1953 336.099910736084 L 1958.9250153761643 336.099910736084" p="b3e18f533d5b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ca57ef6e5d95" d="M 2351.0124881450947 336.099910736084 L 2370 336.099910736084 L 2370 304.299880688007 A 4 4 0 0 1 2374 300.299880688007 L 2379.012521597055 300.299880688007" p="c6d3d4084cf2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a8b5728c4386" d="M 2351.0124881450947 336.099910736084 L 2370 336.099910736084 L 2370 336.099910736084 L 2379.012521597055 336.099910736084" p="c6d3d4084cf2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8aad193dddd3" d="M 2351.0124881450947 336.099910736084 L 2370 336.099910736084 L 2370 367.89990263718823 A 4 4 0 0 0 2374 371.89990263718823 L 2379.012521597055 371.89990263718823" p="c6d3d4084cf2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e03cc1ba49c4" d="M 1930.9250230055588 389.79995580819934 L 1949 389.79995580819934 L 1949 457.39997775738055 A 4 4 0 0 0 1953 461.39997775738055 L 1958.9250153761643 461.39997775738055" p="b3e18f533d5b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7876ba1c8b42" d="M 2230.350021949181 461.39997775738055 L 2249 461.39997775738055 L 2249 411.6999708322378 A 4 4 0 0 1 2253 407.6999708322378 L 2258.3500319260816 407.6999708322378" p="e03cc1ba49c4" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_76565be688c0" d="M 2230.350021949181 461.39997775738055 L 2249 461.39997775738055 L 2249 447.4999627333421 A 4 4 0 0 1 2253 443.4999627333421 L 2258.3500319260816 443.4999627333421" p="e03cc1ba49c4" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7c39ef0a3485" d="M 2230.350021949181 461.39997775738055 L 2249 461.39997775738055 L 2249 475.29993702815125 A 4 4 0 0 0 2253 479.29993702815125 L 2258.3500319260816 479.29993702815125" p="e03cc1ba49c4" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d2c5679a20aa" d="M 2230.350021949181 461.39997775738055 L 2249 461.39997775738055 L 2249 511.09996707622827 A 4 4 0 0 0 2253 515.0999670762283 L 2258.3500319260816 515.0999670762283" p="e03cc1ba49c4" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e9e54169671e" d="M 1930.9250230055588 389.79995580819934 L 1949 389.79995580819934 L 1949 546.8999589773325 A 4 4 0 0 0 1953 550.8999589773325 L 1958.9250153761643 550.8999589773325" p="b3e18f533d5b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2f0164cce1cb" d="M 1754.9249971829927 371.89990263718823 L 1773 371.89990263718823 L 1773 582.6999332721417 A 4 4 0 0 0 1777 586.6999332721417 L 1782.9250159630408 586.6999332721417" p="cd30c69a178d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4a203f699e86" d="M 1438.12498826247 389.79995580819934 L 1457 389.79995580819934 L 1457 636.3999401972844 A 4 4 0 0 0 1461 640.3999401972844 L 1466.1249718299277 640.3999401972844" p="ee595a178bab" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_365075a4cb22" d="M 1536.1249718299277 640.3999401972844 L 1555 640.3999401972844 L 1555 626.499925173246 A 4 4 0 0 1 1559 622.499925173246 L 1564.1249906099758 622.499925173246" p="4a203f699e86" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4fe50961f58f" d="M 1536.1249718299277 640.3999401972844 L 1555 640.3999401972844 L 1555 654.2998994680552 A 4 4 0 0 0 1559 658.2998994680552 L 1564.1249906099758 658.2998994680552" p="4a203f699e86" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c16236f6b2ba" d="M 932.8625253530649 1026.699942075289 L 951 1026.699942075289 L 951 787.5999576862042 A 4 4 0 0 1 955 783.5999576862042 L 960.8624737079326 783.5999576862042" p="a511f651d2af" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_384485835c4a" d="M 1431.1624849759614 783.5999576862042 L 1450 783.5999576862042 L 1450 733.8999683673566 A 4 4 0 0 1 1454 729.8999683673566 L 1459.1625037560095 729.8999683673566" p="c16236f6b2ba" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ede901a9917d" d="M 1529.1625037560095 729.8999683673566 L 1548 729.8999683673566 L 1548 698.0999295161321 A 4 4 0 0 1 1552 694.0999295161321 L 1557.1625225360576 694.0999295161321" p="384485835c4a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e1fe83131c5a" d="M 1529.1625037560095 729.8999683673566 L 1548 729.8999683673566 L 1548 729.8999683673566 L 1557.1625225360576 729.8999683673566" p="384485835c4a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_006c3b10e763" d="M 1529.1625037560095 729.8999683673566 L 1548 729.8999683673566 L 1548 761.6999426621658 A 4 4 0 0 0 1552 765.6999426621658 L 1557.1625225360576 765.6999426621658" p="384485835c4a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_26aa76b2ec4f" d="M 1431.1624849759614 783.5999576862042 L 1450 783.5999576862042 L 1450 833.2999088580792 A 4 4 0 0 0 1454 837.2999088580792 L 1459.1625037560095 837.2999088580792" p="c16236f6b2ba" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3c0cbbfb9321" d="M 1650.1499938964844 837.2999088580792 L 1669 837.2999088580792 L 1669 837.2999088580792 L 1678.1500009390024 837.2999088580792" p="26aa76b2ec4f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7894b3719e6b" d="M 1895.5375084510217 837.2999088580792 L 1914 837.2999088580792 L 1914 805.49993456327 A 4 4 0 0 1 1918 801.49993456327 L 1923.5375096247747 801.49993456327" p="3c0cbbfb9321" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_90bb0c84a45d" d="M 1895.5375084510217 837.2999088580792 L 1914 837.2999088580792 L 1914 837.2999088580792 L 1923.5375096247747 837.2999088580792" p="3c0cbbfb9321" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2499ad6f6377" d="M 1895.5375084510217 837.2999088580792 L 1914 837.2999088580792 L 1914 869.0999198326698 A 4 4 0 0 0 1918 873.0999198326698 L 1923.5375096247747 873.0999198326698" p="3c0cbbfb9321" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_baf3540a1d88" d="M 932.8625253530649 1026.699942075289 L 951 1026.699942075289 L 951 966.5999480027419 A 4 4 0 0 1 955 962.5999480027419 L 960.8624737079326 962.5999480027419" p="a511f651d2af" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ccf9023486b9" d="M 1554.0624530498799 962.5999480027419 L 1573 962.5999480027419 L 1573 912.8999498807467 A 4 4 0 0 1 1577 908.8999498807467 L 1582.0624718299277 908.8999498807467" p="baf3540a1d88" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a473a61bbd31" d="M 1554.0624530498799 962.5999480027419 L 1573 962.5999480027419 L 1573 976.4999630267804 A 4 4 0 0 0 1577 980.4999630267804 L 1582.0624718299277 980.4999630267804" p="baf3540a1d88" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_708175bfbc28" d="M 1941.8374868539663 980.4999630267804 L 1960 980.4999630267804 L 1960 948.6999520521898 A 4 4 0 0 1 1964 944.6999520521898 L 1969.8375144371619 944.6999520521898" p="a473a61bbd31" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_37fc959ea257" d="M 1941.8374868539663 980.4999630267804 L 1960 980.4999630267804 L 1960 994.3999311006986 A 4 4 0 0 0 1964 998.3999311006986 L 1969.8375144371619 998.3999311006986" p="a473a61bbd31" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d759d66546c8" d="M 2187.9125360342173 998.3999311006986 L 2206 998.3999311006986 L 2206 984.4999630267804 A 4 4 0 0 1 2210 980.4999630267804 L 2215.9125225360576 980.4999630267804" p="37fc959ea257" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d944cbd83f77" d="M 2187.9125360342173 998.3999311006986 L 2206 998.3999311006986 L 2206 1012.2999461247371 A 4 4 0 0 0 2210 1016.2999461247371 L 2215.9125225360576 1016.2999461247371" p="37fc959ea257" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_799aae3843c5" d="M 932.8625253530649 1026.699942075289 L 951 1026.699942075289 L 951 1244.9999389648438 A 4 4 0 0 0 955 1248.9999389648438 L 960.8624737079326 1248.9999389648438" p="a511f651d2af" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ab034e32e6bb" d="M 1277.4749286358172 1248.9999389648438 L 1296 1248.9999389648438 L 1296 1248.9999389648438 L 1305.4749943659856 1248.9999389648438" p="799aae3843c5" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3f11c591b52f" d="M 1505.6125347430889 1248.9999389648438 L 1524 1248.9999389648438 L 1524 1109.799950819749 A 4 4 0 0 1 1528 1105.799950819749 L 1533.612530048077 1105.799950819749" p="ab034e32e6bb" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_144356fa6205" d="M 1762.5625140850361 1105.799950819749 L 1781 1105.799950819749 L 1781 1056.0999292226938 A 4 4 0 0 1 1785 1052.0999292226938 L 1790.562521127554 1052.0999292226938" p="3f11c591b52f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0f6c5210cfff" d="M 1762.5625140850361 1105.799950819749 L 1781 1105.799950819749 L 1781 1105.799950819749 L 1790.562521127554 1105.799950819749" p="3f11c591b52f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ebd3455cba12" d="M 2416.3375267615684 1105.799950819749 L 2435 1105.799950819749 L 2435 1091.8999123206506 A 4 4 0 0 1 2439 1087.8999123206506 L 2444.3375338040864 1087.8999123206506" p="0f6c5210cfff" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2e78998a4174" d="M 2416.3375267615684 1105.799950819749 L 2435 1105.799950819749 L 2435 1119.6999379671538 A 4 4 0 0 0 2439 1123.6999379671538 L 2444.3375338040864 1123.6999379671538" p="0f6c5210cfff" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3e71b877dd7c" d="M 1762.5625140850361 1105.799950819749 L 1781 1105.799950819749 L 1781 1155.4999489417444 A 4 4 0 0 0 1785 1159.4999489417444 L 1790.562521127554 1159.4999489417444" p="3f11c591b52f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ed0c4163f1ea" d="M 2058.387533334585 1159.4999489417444 L 2077 1159.4999489417444 L 2077 1159.4999489417444 L 2086.387516902043 1159.4999489417444" p="3e71b877dd7c" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_de7641a1df8a" d="M 1505.6125347430889 1248.9999389648438 L 1524 1248.9999389648438 L 1524 1316.5999477093037 A 4 4 0 0 0 1528 1320.5999477093037 L 1533.612530048077 1320.5999477093037" p="ab034e32e6bb" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_38e3f44d093c" d="M 1771.750018780048 1320.5999477093037 L 1790 1320.5999477093037 L 1790 1306.6999517587515 A 4 4 0 0 1 1794 1302.6999517587515 L 1799.750014085036 1302.6999517587515" p="de7641a1df8a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6712afb37b42" d="M 2034.8750187800479 1302.6999517587515 L 2053 1302.6999517587515 L 2053 1270.899953988882 A 4 4 0 0 1 2057 1266.899953988882 L 2062.875014085036 1266.899953988882" p="38e3f44d093c" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3ee0aed4cddc" d="M 2132.8750199538013 1266.899953988882 L 2151 1266.899953988882 L 2151 1217.1999470637395 A 4 4 0 0 1 2155 1213.1999470637395 L 2160.875021127554 1213.1999470637395" p="6712afb37b42" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_203773cc98d6" d="M 2222.850024883564 1213.1999470637395 L 2241 1213.1999470637395 L 2241 1199.2999555147612 A 4 4 0 0 1 2245 1195.2999555147612 L 2250.8500319260816 1195.2999555147612" p="3ee0aed4cddc" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ba57e8925259" d="M 2222.850024883564 1213.1999470637395 L 2241 1213.1999470637395 L 2241 1227.0999386127178 A 4 4 0 0 0 2245 1231.0999386127178 L 2250.8500319260816 1231.0999386127178" p="3ee0aed4cddc" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d31a9ec57351" d="M 2132.8750199538013 1266.899953988882 L 2151 1266.899953988882 L 2151 1298.6999517587515 A 4 4 0 0 0 2155 1302.6999517587515 L 2160.875021127554 1302.6999517587515" p="6712afb37b42" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9b807dfaa88b" d="M 2219.47502723107 1302.6999517587515 L 2238 1302.6999517587515 L 2238 1270.899953988882 A 4 4 0 0 1 2242 1266.899953988882 L 2247.4750225360576 1266.899953988882" p="d31a9ec57351" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1df80785a900" d="M 2219.47502723107 1302.6999517587515 L 2238 1302.6999517587515 L 2238 1302.6999517587515 L 2247.4750225360576 1302.6999517587515" p="d31a9ec57351" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_61e69d16e3fe" d="M 2219.47502723107 1302.6999517587515 L 2238 1302.6999517587515 L 2238 1334.499950995812 A 4 4 0 0 0 2242 1338.499950995812 L 2247.4750225360576 1338.499950995812" p="d31a9ec57351" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ed7ee14ac7ef" d="M 2034.8750187800479 1302.6999517587515 L 2053 1302.6999517587515 L 2053 1370.2999458312988 A 4 4 0 0 0 2057 1374.2999458312988 L 2062.875014085036 1374.2999458312988" p="38e3f44d093c" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_89cdb0adb24b" d="M 2034.8750187800479 1302.6999517587515 L 2053 1302.6999517587515 L 2053 1406.0999524043157 A 4 4 0 0 0 2057 1410.0999524043157 L 2062.875014085036 1410.0999524043157" p="38e3f44d093c" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8e1387412f4d" d="M 1771.750018780048 1320.5999477093037 L 1790 1320.5999477093037 L 1790 1441.8999501741848 A 4 4 0 0 0 1794 1445.8999501741848 L 1799.750014085036 1445.8999501741848" p="de7641a1df8a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4d2fe0feb328" d="M 932.8625253530649 1026.699942075289 L 951 1026.699942075289 L 951 1702.899953988882 A 4 4 0 0 0 955 1706.899953988882 L 960.8624737079326 1706.899953988882" p="a511f651d2af" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9bb1bcc218db" d="M 1277.8249887319712 1706.899953988882 L 1296 1706.899953988882 L 1296 1706.899953988882 L 1305.8250544621394 1706.899953988882" p="4d2fe0feb328" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a545017cf5e7" d="M 1509.0250338040864 1706.899953988882 L 1528 1706.899953988882 L 1528 1485.6999508784368 A 4 4 0 0 1 1532 1481.6999508784368 L 1537.0250056340144 1481.6999508784368" p="9bb1bcc218db" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1932363edc09" d="M 1509.0250338040864 1706.899953988882 L 1528 1706.899953988882 L 1528 1720.7999602097732 A 4 4 0 0 0 1532 1724.7999602097732 L 1537.0250056340144 1724.7999602097732" p="9bb1bcc218db" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_538231746210" d="M 1705.5250079815205 1724.7999602097732 L 1724 1724.7999602097732 L 1724 1675.0999635549692 A 4 4 0 0 1 1728 1671.0999635549692 L 1733.5250150240383 1671.0999635549692" p="1932363edc09" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_eebbf1e0843a" d="M 2116.950002817007 1671.0999635549692 L 2135 1671.0999635549692 L 2135 1521.4999501154973 A 4 4 0 0 1 2139 1517.4999501154973 L 2144.9500098595254 1517.4999501154973" p="538231746210" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_89bbfa003c22" d="M 2116.950002817007 1671.0999635549692 L 2135 1671.0999635549692 L 2135 1557.2999493525579 A 4 4 0 0 1 2139 1553.2999493525579 L 2144.9500098595254 1553.2999493525579" p="538231746210" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1727d93a7f8a" d="M 2116.950002817007 1671.0999635549692 L 2135 1671.0999635549692 L 2135 1702.899953988882 A 4 4 0 0 0 2139 1706.899953988882 L 2144.9500098595254 1706.899953988882" p="538231746210" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_73a9f86ccccb" d="M 2240.9500122070312 1706.899953988882 L 2259 1706.899953988882 L 2259 1593.0999559255747 A 4 4 0 0 1 2263 1589.0999559255747 L 2268.950007512019 1589.0999559255747" p="1727d93a7f8a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cd35799f168b" d="M 2240.9500122070312 1706.899953988882 L 2259 1706.899953988882 L 2259 1657.1999588012695 A 4 4 0 0 1 2263 1653.1999588012695 L 2268.950007512019 1653.1999588012695" p="1727d93a7f8a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_654a9fe6fbb2" d="M 2753.1500244140625 1653.1999588012695 L 2772 1653.1999588012695 L 2772 1628.8999566298264 A 4 4 0 0 1 2776 1624.8999566298264 L 2781.1499962439902 1624.8999566298264" p="cd35799f168b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5f5291252a11" d="M 2753.1500244140625 1653.1999588012695 L 2772 1653.1999588012695 L 2772 1667.0999635549692 A 4 4 0 0 0 2776 1671.0999635549692 L 2781.1499962439902 1671.0999635549692" p="cd35799f168b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b78b905bc1f3" d="M 2240.9500122070312 1706.899953988882 L 2259 1706.899953988882 L 2259 1713.2999602097732 A 4 4 0 0 0 2263 1717.2999602097732 L 2268.950007512019 1717.2999602097732" p="1727d93a7f8a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b1bd5815af1d" d="M 2240.9500122070312 1706.899953988882 L 2259 1706.899953988882 L 2259 1784.8999498807466 A 4 4 0 0 0 2263 1788.8999498807466 L 2268.950007512019 1788.8999498807466" p="1727d93a7f8a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_05921aecf2eb" d="M 2429.950009859525 1788.8999498807466 L 2448 1788.8999498807466 L 2448 1757.09994330773 A 4 4 0 0 1 2452 1753.09994330773 L 2457.950016902043 1753.09994330773" p="b1bd5815af1d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b99b5d64db17" d="M 2429.950009859525 1788.8999498807466 L 2448 1788.8999498807466 L 2448 1788.8999498807466 L 2457.950016902043 1788.8999498807466" p="b1bd5815af1d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bf8d7aa97897" d="M 2429.950009859525 1788.8999498807466 L 2448 1788.8999498807466 L 2448 1820.6999520521897 A 4 4 0 0 0 2452 1824.6999520521897 L 2457.950016902043 1824.6999520521897" p="b1bd5815af1d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4d6e233fdb87" d="M 1705.5250079815205 1724.7999602097732 L 1724 1724.7999602097732 L 1724 1892.299946124737 A 4 4 0 0 0 1728 1896.299946124737 L 1733.5250150240383 1896.299946124737" p="1932363edc09" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c7ef2e97ef6c" d="M 1781.5250161977913 1896.299946124737 L 1800 1896.299946124737 L 1800 1864.4999630267803 A 4 4 0 0 1 1804 1860.4999630267803 L 1809.5250173715444 1860.4999630267803" p="4d6e233fdb87" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1b1e3c39c823" d="M 1781.5250161977913 1896.299946124737 L 1800 1896.299946124737 L 1800 1896.299946124737 L 1809.5250173715444 1896.299946124737" p="4d6e233fdb87" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d2317186a132" d="M 1781.5250161977913 1896.299946124737 L 1800 1896.299946124737 L 1800 1928.099976172814 A 4 4 0 0 0 1804 1932.099976172814 L 1809.5250173715444 1932.099976172814" p="4d6e233fdb87" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(210.00006103515625, 1966.999755859375)" id="sdjakdjak1"><g id="subline_e9ee3d18e7bb" transform="translate(0.5,0.5)"><path id="line_e237bed93f85" d="M 247.1125030517578 482.20001220703125 L 266 482.20001220703125 L 266 17.90000057220459 A 4 4 0 0 1 270 13.90000057220459 L 275.112548828125 13.90000057220459" p="e9ee3d18e7bb" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b4f7a19acb24" d="M 247.1125030517578 482.20001220703125 L 266 482.20001220703125 L 266 71.60001277923584 A 4 4 0 0 1 270 67.60001277923584 L 275.112548828125 67.60001277923584" p="e9ee3d18e7bb" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_59da1b9c1739" d="M 635.3750610351562 67.60001277923584 L 654 67.60001277923584 L 654 53.69998836517334 A 4 4 0 0 1 658 49.69998836517334 L 663.3750610351562 49.69998836517334" p="b4f7a19acb24" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1c5be17e6825" d="M 794.8500671386719 49.69998836517334 L 813 49.69998836517334 L 813 49.69998836517334 L 822.8500366210938 49.69998836517334" p="59da1b9c1739" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f2f00c831068" d="M 635.3750610351562 67.60001277923584 L 654 67.60001277923584 L 654 81.50000667572021 A 4 4 0 0 0 658 85.50000667572021 L 663.3750610351562 85.50000667572021" p="b4f7a19acb24" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_256389390b6a" d="M 794.8500671386719 85.50000667572021 L 813 85.50000667572021 L 813 85.50000667572021 L 822.8500366210938 85.50000667572021" p="f2f00c831068" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7076fcb3ece6" d="M 247.1125030517578 482.20001220703125 L 266 482.20001220703125 L 266 125.29999446868896 A 4 4 0 0 1 270 121.29999446868896 L 275.112548828125 121.29999446868896" p="e9ee3d18e7bb" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e954c2f2fb51" d="M 247.1125030517578 482.20001220703125 L 266 482.20001220703125 L 266 521.5000066757202 A 4 4 0 0 0 270 525.5000066757202 L 275.112548828125 525.5000066757202" p="e9ee3d18e7bb" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1d44dc31394f" d="M 370.9125518798828 525.5000066757202 L 389 525.5000066757202 L 389 214.79999446868896 A 4 4 0 0 1 393 210.79999446868896 L 398.91253662109375 210.79999446868896" p="e954c2f2fb51" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a8d98e6a7ade" d="M 468.91253662109375 210.79999446868896 L 487 210.79999446868896 L 487 161.10001277923584 A 4 4 0 0 1 491 157.10001277923584 L 496.91253662109375 157.10001277923584" p="1d44dc31394f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c217232400af" d="M 468.91253662109375 210.79999446868896 L 487 210.79999446868896 L 487 196.9000005722046 A 4 4 0 0 1 491 192.9000005722046 L 496.91253662109375 192.9000005722046" p="1d44dc31394f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b764eb1223d1" d="M 468.91253662109375 210.79999446868896 L 487 210.79999446868896 L 487 224.69998836517334 A 4 4 0 0 0 491 228.69998836517334 L 496.91253662109375 228.69998836517334" p="1d44dc31394f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fcb20115cf8e" d="M 468.91253662109375 210.79999446868896 L 487 210.79999446868896 L 487 260.5000066757202 A 4 4 0 0 0 491 264.5000066757202 L 496.91253662109375 264.5000066757202" p="1d44dc31394f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4c6bd42827c7" d="M 370.9125518798828 525.5000066757202 L 389 525.5000066757202 L 389 593.0999822616577 A 4 4 0 0 0 393 597.0999822616577 L 398.91253662109375 597.0999822616577" p="e954c2f2fb51" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1092b0a2c060" d="M 468.91253662109375 597.0999822616577 L 487 597.0999822616577 L 487 304.29999446868896 A 4 4 0 0 1 491 300.29999446868896 L 496.91253662109375 300.29999446868896" p="4c6bd42827c7" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_036aa81e76da" d="M 672.6750335693359 300.29999446868896 L 691 300.29999446868896 L 691 300.29999446868896 L 700.6749877929688 300.29999446868896" p="1092b0a2c060" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2b23e492cb5b" d="M 468.91253662109375 597.0999822616577 L 487 597.0999822616577 L 487 368.4000310897827 A 4 4 0 0 1 491 364.4000310897827 L 496.91253662109375 364.4000310897827" p="4c6bd42827c7" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_498049dbd1a9" d="M 883.7000427246094 364.4000310897827 L 902 364.4000310897827 L 902 340.0999822616577 A 4 4 0 0 1 906 336.0999822616577 L 911.7000122070312 336.0999822616577" p="2b23e492cb5b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d7b8a1bb170a" d="M 883.7000427246094 364.4000310897827 L 902 364.4000310897827 L 902 378.3000316619873 A 4 4 0 0 0 906 382.3000316619873 L 911.7000122070312 382.3000316619873" p="2b23e492cb5b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ef6a3216ebd1" d="M 468.91253662109375 597.0999822616577 L 487 597.0999822616577 L 487 450.4000310897827 A 4 4 0 0 1 491 446.4000310897827 L 496.91253662109375 446.4000310897827" p="4c6bd42827c7" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ca54ee87f476" d="M 699.9125366210938 446.4000310897827 L 718 446.4000310897827 L 718 446.4000310897827 L 727.9125366210938 446.4000310897827" p="ef6a3216ebd1" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_29c8e81a4faf" d="M 999.8125305175781 446.4000310897827 L 1018 446.4000310897827 L 1018 432.5000066757202 A 4 4 0 0 1 1022 428.5000066757202 L 1027.8125610351562 428.5000066757202" p="ca54ee87f476" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2f5a591d55ad" d="M 1142.2250595092773 428.5000066757202 L 1161 428.5000066757202 L 1161 428.5000066757202 L 1170.2250366210938 428.5000066757202" p="29c8e81a4faf" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7174b7c1f92c" d="M 999.8125305175781 446.4000310897827 L 1018 446.4000310897827 L 1018 460.29999446868896 A 4 4 0 0 0 1022 464.29999446868896 L 1027.8125610351562 464.29999446868896" p="ca54ee87f476" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4b3acd302f43" d="M 1142.2250595092773 464.29999446868896 L 1161 464.29999446868896 L 1161 464.29999446868896 L 1170.2250366210938 464.29999446868896" p="7174b7c1f92c" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a5b6c3ccb94e" d="M 468.91253662109375 597.0999822616577 L 487 597.0999822616577 L 487 593.5999822616577 A 4 4 0 0 1 491 589.5999822616577 L 496.91253662109375 589.5999822616577" p="4c6bd42827c7" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b0ffb411bdbe" d="M 870.550048828125 589.5999822616577 L 889 589.5999822616577 L 889 539.9000310897827 A 4 4 0 0 1 893 535.9000310897827 L 898.5499877929688 535.9000310897827" p="a5b6c3ccb94e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bbc379ecd2a8" d="M 1007.5499877929688 535.9000310897827 L 1026 535.9000310897827 L 1026 504.0999822616577 A 4 4 0 0 1 1030 500.0999822616577 L 1035.5499877929688 500.0999822616577" p="b0ffb411bdbe" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3d5282711d7b" d="M 1101.4249877929688 500.0999822616577 L 1120 500.0999822616577 L 1120 500.0999822616577 L 1129.4249877929688 500.0999822616577" p="bbc379ecd2a8" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1844e658a255" d="M 1007.5499877929688 535.9000310897827 L 1026 535.9000310897827 L 1026 535.9000310897827 L 1035.5499877929688 535.9000310897827" p="b0ffb411bdbe" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a828c28363a3" d="M 1110.3374862670898 535.9000310897827 L 1129 535.9000310897827 L 1129 535.9000310897827 L 1138.3375854492188 535.9000310897827" p="1844e658a255" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5c37f5b28b00" d="M 1007.5499877929688 535.9000310897827 L 1026 535.9000310897827 L 1026 567.7000188827515 A 4 4 0 0 0 1030 571.7000188827515 L 1035.5499877929688 571.7000188827515" p="b0ffb411bdbe" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6a02fb496dcd" d="M 1111.5499877929688 571.7000188827515 L 1130 571.7000188827515 L 1130 571.7000188827515 L 1139.5499877929688 571.7000188827515" p="5c37f5b28b00" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_20e9b0453fbf" d="M 870.550048828125 589.5999822616577 L 889 589.5999822616577 L 889 603.5000066757202 A 4 4 0 0 0 893 607.5000066757202 L 898.5499877929688 607.5000066757202" p="a5b6c3ccb94e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_14e2a4494aef" d="M 870.550048828125 589.5999822616577 L 889 589.5999822616577 L 889 639.299994468689 A 4 4 0 0 0 893 643.299994468689 L 898.5499877929688 643.299994468689" p="a5b6c3ccb94e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d39e95dc1434" d="M 870.550048828125 589.5999822616577 L 889 589.5999822616577 L 889 675.0999822616577 A 4 4 0 0 0 893 679.0999822616577 L 898.5499877929688 679.0999822616577" p="a5b6c3ccb94e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8282e7460acd" d="M 468.91253662109375 597.0999822616577 L 487 597.0999822616577 L 487 782.5000677108765 A 4 4 0 0 0 491 786.5000677108765 L 496.91253662109375 786.5000677108765" p="4c6bd42827c7" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e975b852c700" d="M 640.2750396728516 786.5000677108765 L 659 786.5000677108765 L 659 772.600043296814 A 4 4 0 0 1 663 768.600043296814 L 668.2750854492188 768.600043296814" p="8282e7460acd" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ed4fc6960972" d="M 973.6875915527344 768.600043296814 L 992 768.600043296814 L 992 718.9000310897827 A 4 4 0 0 1 996 714.9000310897827 L 1001.6875610351562 714.9000310897827" p="e975b852c700" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_44c205ddeaa4" d="M 973.6875915527344 768.600043296814 L 992 768.600043296814 L 992 782.5000677108765 A 4 4 0 0 0 996 786.5000677108765 L 1001.6875610351562 786.5000677108765" p="e975b852c700" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a25c934dc660" d="M 1318.6875610351562 786.5000677108765 L 1337 786.5000677108765 L 1337 754.7000188827515 A 4 4 0 0 1 1341 750.7000188827515 L 1346.6875610351562 750.7000188827515" p="44c205ddeaa4" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_044326f2e6d9" d="M 1318.6875610351562 786.5000677108765 L 1337 786.5000677108765 L 1337 786.5000677108765 L 1346.6875610351562 786.5000677108765" p="44c205ddeaa4" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_593cf4a16db5" d="M 1318.6875610351562 786.5000677108765 L 1337 786.5000677108765 L 1337 818.299994468689 A 4 4 0 0 0 1341 822.299994468689 L 1346.6875610351562 822.299994468689" p="44c205ddeaa4" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bf372370a716" d="M 640.2750396728516 786.5000677108765 L 659 786.5000677108765 L 659 854.100043296814 A 4 4 0 0 0 663 858.100043296814 L 668.2750854492188 858.100043296814" p="8282e7460acd" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7c988483864e" d="M 468.91253662109375 597.0999822616577 L 487 597.0999822616577 L 487 889.8999700546265 A 4 4 0 0 0 491 893.8999700546265 L 496.91253662109375 893.8999700546265" p="4c6bd42827c7" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_72dbbfb24cc9" d="M 792.1625366210938 893.8999700546265 L 811 893.8999700546265 L 811 893.8999700546265 L 820.1625366210938 893.8999700546265" p="7c988483864e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_cb8119b1c662" d="M 247.1125030517578 482.20001220703125 L 266 482.20001220703125 L 266 936.100043296814 A 4 4 0 0 0 270 940.100043296814 L 275.112548828125 940.100043296814" p="e9ee3d18e7bb" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_ab6649c3f807" d="M 414.9750518798828 940.100043296814 L 433 940.100043296814 L 433 940.100019454956 L 442.97503662109375 940.100019454956" p="cb8119b1c662" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(210.00006103515625, 1805.999755859375)" id="sdjakdjak2"><g id="subline_e954006bb31a" transform="translate(0.5,0.5)"><path id="line_3566ea968514" d="M 237.625 67.5999984741211 L 256 67.5999984741211 L 256 67.59999752044678 L 265.625 67.59999752044678" p="e954006bb31a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_fda43886fb78" d="M 473.8874969482422 67.59999752044678 L 492 67.59999752044678 L 492 17.90000057220459 A 4 4 0 0 1 496 13.90000057220459 L 501.88751220703125 13.90000057220459" p="3566ea968514" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f1281049869a" d="M 621.2500152587891 13.90000057220459 L 640 13.90000057220459 L 640 13.90000057220459 L 649.2500610351562 13.90000057220459" p="fda43886fb78" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0111e9a98246" d="M 473.8874969482422 67.59999752044678 L 492 67.59999752044678 L 492 53.7000036239624 A 4 4 0 0 1 496 49.7000036239624 L 501.88751220703125 49.7000036239624" p="3566ea968514" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_22fd6cf566dc" d="M 621.2500152587891 49.7000036239624 L 640 49.7000036239624 L 640 49.7000036239624 L 649.2500610351562 49.7000036239624" p="0111e9a98246" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b0e8cc5d9e99" d="M 473.8874969482422 67.59999752044678 L 492 67.59999752044678 L 492 81.49999141693115 A 4 4 0 0 0 496 85.49999141693115 L 501.88751220703125 85.49999141693115" p="3566ea968514" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_65efafe4c16b" d="M 621.2500152587891 85.49999141693115 L 640 85.49999141693115 L 640 85.49999141693115 L 649.2500610351562 85.49999141693115" p="b0e8cc5d9e99" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1ca82ed8c91d" d="M 473.8874969482422 67.59999752044678 L 492 67.59999752044678 L 492 117.29999446868896 A 4 4 0 0 0 496 121.29999446868896 L 501.88751220703125 121.29999446868896" p="3566ea968514" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_30fc212dffc6" d="M 621.2500152587891 121.29999446868896 L 640 121.29999446868896 L 640 121.29999446868896 L 649.2500610351562 121.29999446868896" p="1ca82ed8c91d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(210.00006103515625, 964.999755859375)" id="sdjakdjak3"><g id="subline_9fd9b912a80d" transform="translate(0.5,0.5)"><path id="line_c90e212174a8" d="M 235.35000610351562 407.70001220703125 L 254 407.70001220703125 L 254 407.70001888275146 L 263.35003662109375 407.70001888275146" p="9fd9b912a80d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_359ddfe0844d" d="M 752.7500305175781 407.70001888275146 L 771 407.70001888275146 L 771 53.69998836517334 A 4 4 0 0 1 775 49.69998836517334 L 780.7500610351562 49.69998836517334" p="c90e212174a8" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4fbff3e25b3e" d="M 828.7500610351562 49.69998836517334 L 847 49.69998836517334 L 847 17.90000057220459 A 4 4 0 0 1 851 13.90000057220459 L 856.7500610351562 13.90000057220459" p="359ddfe0844d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0e8411c59c24" d="M 828.7500610351562 49.69998836517334 L 847 49.69998836517334 L 847 49.69998836517334 L 856.7500610351562 49.69998836517334" p="359ddfe0844d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1efb2c781a93" d="M 828.7500610351562 49.69998836517334 L 847 49.69998836517334 L 847 81.50003719329834 A 4 4 0 0 0 851 85.50003719329834 L 856.7500610351562 85.50003719329834" p="359ddfe0844d" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5e90932dee68" d="M 752.7500305175781 407.70001888275146 L 771 407.70001888275146 L 771 161.10001277923584 A 4 4 0 0 1 775 157.10001277923584 L 780.7500610351562 157.10001277923584" p="c90e212174a8" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_4182cc5d70a8" d="M 978.4000701904297 157.10001277923584 L 997 157.10001277923584 L 997 125.30002498626709 A 4 4 0 0 1 1001 121.30002498626709 L 1006.4000854492188 121.30002498626709" p="5e90932dee68" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2db4b4608b73" d="M 978.4000701904297 157.10001277923584 L 997 157.10001277923584 L 997 157.10001277923584 L 1006.4000854492188 157.10001277923584" p="5e90932dee68" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2b0635c120ac" d="M 978.4000701904297 157.10001277923584 L 997 157.10001277923584 L 997 188.9000005722046 A 4 4 0 0 0 1001 192.9000005722046 L 1006.4000854492188 192.9000005722046" p="5e90932dee68" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_19e849d9995b" d="M 752.7500305175781 407.70001888275146 L 771 407.70001888275146 L 771 250.60001277923584 A 4 4 0 0 1 775 246.60001277923584 L 780.7500610351562 246.60001277923584" p="c90e212174a8" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5cd8919dc1a5" d="M 988.0375671386719 246.60001277923584 L 1007 246.60001277923584 L 1007 232.70001888275146 A 4 4 0 0 1 1011 228.70001888275146 L 1016.0375366210938 228.70001888275146" p="19e849d9995b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2d60576e649d" d="M 988.0375671386719 246.60001277923584 L 1007 246.60001277923584 L 1007 260.5000066757202 A 4 4 0 0 0 1011 264.5000066757202 L 1016.0375366210938 264.5000066757202" p="19e849d9995b" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_dafa7fc35578" d="M 752.7500305175781 407.70001888275146 L 771 407.70001888275146 L 771 322.20001888275146 A 4 4 0 0 1 775 318.20001888275146 L 780.7500610351562 318.20001888275146" p="c90e212174a8" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_535cbe2b4aad" d="M 1078.4250793457031 318.20001888275146 L 1097 318.20001888275146 L 1097 304.3000249862671 A 4 4 0 0 1 1101 300.3000249862671 L 1106.4249877929688 300.3000249862671" p="dafa7fc35578" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e2841401d101" d="M 1078.4250793457031 318.20001888275146 L 1097 318.20001888275146 L 1097 332.10001277923584 A 4 4 0 0 0 1101 336.10001277923584 L 1106.4249877929688 336.10001277923584" p="dafa7fc35578" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b0fdd4be9732" d="M 752.7500305175781 407.70001888275146 L 771 407.70001888275146 L 771 375.9000310897827 A 4 4 0 0 1 775 371.9000310897827 L 780.7500610351562 371.9000310897827" p="c90e212174a8" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_81407cacec63" d="M 1035.1500701904297 371.9000310897827 L 1054 371.9000310897827 L 1054 371.9000310897827 L 1063.1500854492188 371.9000310897827" p="b0fdd4be9732" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_511a386ba583" d="M 752.7500305175781 407.70001888275146 L 771 407.70001888275146 L 771 600.6000204086304 A 4 4 0 0 0 775 604.6000204086304 L 780.7500610351562 604.6000204086304" p="c90e212174a8" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bb26203727cf" d="M 980.7875671386719 604.6000204086304 L 999 604.6000204086304 L 999 411.70001888275146 A 4 4 0 0 1 1003 407.70001888275146 L 1008.7875366210938 407.70001888275146" p="511a386ba583" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_3ad41dba487c" d="M 980.7875671386719 604.6000204086304 L 999 604.6000204086304 L 999 447.5000066757202 A 4 4 0 0 1 1003 443.5000066757202 L 1008.7875366210938 443.5000066757202" p="511a386ba583" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8015cffbe998" d="M 980.7875671386719 604.6000204086304 L 999 604.6000204086304 L 999 483.3000249862671 A 4 4 0 0 1 1003 479.3000249862671 L 1008.7875366210938 479.3000249862671" p="511a386ba583" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_9f36dd431849" d="M 980.7875671386719 604.6000204086304 L 999 604.6000204086304 L 999 654.3000249862671 A 4 4 0 0 0 1003 658.3000249862671 L 1008.7875366210938 658.3000249862671" p="511a386ba583" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_58f34a79ebb7" d="M 1056.7875366210938 658.3000249862671 L 1075 658.3000249862671 L 1075 519.1000280380249 A 4 4 0 0 1 1079 515.1000280380249 L 1084.7875366210938 515.1000280380249" p="9f36dd431849" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c4ae132b22a2" d="M 1056.7875366210938 658.3000249862671 L 1075 658.3000249862671 L 1075 672.2000226974487 A 4 4 0 0 0 1079 676.2000226974487 L 1084.7875366210938 676.2000226974487" p="9f36dd431849" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e7741b378e9f" d="M 1198.0000381469727 676.2000226974487 L 1217 676.2000226974487 L 1217 608.6000204086304 A 4 4 0 0 1 1221 604.6000204086304 L 1226.0000610351562 604.6000204086304" p="c4ae132b22a2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5ddc65b1c785" d="M 1296.0000610351562 604.6000204086304 L 1315 604.6000204086304 L 1315 572.8000249862671 A 4 4 0 0 1 1319 568.8000249862671 L 1324.0000610351562 568.8000249862671" p="e7741b378e9f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b35eb765edfa" d="M 1412.1250610351562 568.8000249862671 L 1431 568.8000249862671 L 1431 554.9000158309937 A 4 4 0 0 1 1435 550.9000158309937 L 1440.1250610351562 550.9000158309937" p="5ddc65b1c785" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bf8c95c65f9a" d="M 1412.1250610351562 568.8000249862671 L 1431 568.8000249862671 L 1431 582.7000188827515 A 4 4 0 0 0 1435 586.7000188827515 L 1440.1250610351562 586.7000188827515" p="5ddc65b1c785" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7478b30924ff" d="M 1296.0000610351562 604.6000204086304 L 1315 604.6000204086304 L 1315 636.4000234603882 A 4 4 0 0 0 1319 640.4000234603882 L 1324.0000610351562 640.4000234603882" p="e7741b378e9f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_f38171edf2d7" d="M 1421.3125610351562 640.4000234603882 L 1440 640.4000234603882 L 1440 626.5000219345093 A 4 4 0 0 1 1444 622.5000219345093 L 1449.3125610351562 622.5000219345093" p="7478b30924ff" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d2be623d36ad" d="M 1421.3125610351562 640.4000234603882 L 1440 640.4000234603882 L 1440 654.3000249862671 A 4 4 0 0 0 1444 658.3000249862671 L 1449.3125610351562 658.3000249862671" p="7478b30924ff" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b120ee459601" d="M 1198.0000381469727 676.2000226974487 L 1217 676.2000226974487 L 1217 725.9000248908997 A 4 4 0 0 0 1221 729.9000248908997 L 1226.0000610351562 729.9000248908997" p="c4ae132b22a2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_c34419e9901f" d="M 1347.7500610351562 729.9000248908997 L 1366 729.9000248908997 L 1366 698.1000242233276 A 4 4 0 0 1 1370 694.1000242233276 L 1375.7500610351562 694.1000242233276" p="b120ee459601" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_99db33462c0e" d="M 1347.7500610351562 729.9000248908997 L 1366 729.9000248908997 L 1366 729.9000248908997 L 1375.7500610351562 729.9000248908997" p="b120ee459601" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2b916c10143d" d="M 1347.7500610351562 729.9000248908997 L 1366 729.9000248908997 L 1366 761.700026512146 A 4 4 0 0 0 1370 765.700026512146 L 1375.7500610351562 765.700026512146" p="b120ee459601" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1f934665d262" d="M 1198.0000381469727 676.2000226974487 L 1217 676.2000226974487 L 1217 797.5000295639038 A 4 4 0 0 0 1221 801.5000295639038 L 1226.0000610351562 801.5000295639038" p="c4ae132b22a2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(210.00006103515625, 660.999755859375)" id="sdjakdjak4"><g id="subline_b5825f26463f" transform="translate(0.5,0.5)"><path id="line_3c889794a6db" d="M 205.40000915527344 139.1999969482422 L 224 139.1999969482422 L 224 17.90000057220459 A 4 4 0 0 1 228 13.90000057220459 L 233.4000244140625 13.90000057220459" p="b5825f26463f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2a22aa11f8a2" d="M 205.40000915527344 139.1999969482422 L 224 139.1999969482422 L 224 89.50003719329834 A 4 4 0 0 1 228 85.50003719329834 L 233.4000244140625 85.50003719329834" p="b5825f26463f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_821ffc538a62" d="M 289.25002670288086 85.50003719329834 L 308 85.50003719329834 L 308 53.69998836517334 A 4 4 0 0 1 312 49.69998836517334 L 317.25 49.69998836517334" p="2a22aa11f8a2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_96932aa48401" d="M 289.25002670288086 85.50003719329834 L 308 85.50003719329834 L 308 85.50003719329834 L 317.25 85.50003719329834" p="2a22aa11f8a2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_1b8158ca9745" d="M 289.25002670288086 85.50003719329834 L 308 85.50003719329834 L 308 117.30002498626709 A 4 4 0 0 0 312 121.30002498626709 L 317.25 121.30002498626709" p="2a22aa11f8a2" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_202f3e64cd52" d="M 205.40000915527344 139.1999969482422 L 224 139.1999969482422 L 224 206.8000249862671 A 4 4 0 0 0 228 210.8000249862671 L 233.4000244140625 210.8000249862671" p="b5825f26463f" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_55bdf2d7bc38" d="M 481.6250305175781 210.8000249862671 L 500 210.8000249862671 L 500 161.10001277923584 A 4 4 0 0 1 504 157.10001277923584 L 509.62506103515625 157.10001277923584" p="202f3e64cd52" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_658de7bdab40" d="M 481.6250305175781 210.8000249862671 L 500 210.8000249862671 L 500 196.9000005722046 A 4 4 0 0 1 504 192.9000005722046 L 509.62506103515625 192.9000005722046" p="202f3e64cd52" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d959454cd69a" d="M 481.6250305175781 210.8000249862671 L 500 210.8000249862671 L 500 242.60001277923584 A 4 4 0 0 0 504 246.60001277923584 L 509.62506103515625 246.60001277923584" p="202f3e64cd52" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b800798059f0" d="M 557.6250610351562 246.60001277923584 L 576 246.60001277923584 L 576 232.69998836517334 A 4 4 0 0 1 580 228.69998836517334 L 585.6250610351562 228.69998836517334" p="d959454cd69a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_febec67878ca" d="M 557.6250610351562 246.60001277923584 L 576 246.60001277923584 L 576 260.50003719329834 A 4 4 0 0 0 580 264.50003719329834 L 585.6250610351562 264.50003719329834" p="d959454cd69a" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(210.00006103515625, 106)" id="sdjakdjak5"><g id="subline_94dbd88a7ebf" transform="translate(0.5,0.5)"><path id="line_b669a6925e6e" d="M 194.7624969482422 264.5 L 213 264.5 L 213 196.9000005722046 A 4 4 0 0 1 217 192.9000005722046 L 222.76251220703125 192.9000005722046" p="94dbd88a7ebf" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_17579ed04a75" d="M 396.96250915527344 192.9000005722046 L 415 192.9000005722046 L 415 17.90000057220459 A 4 4 0 0 1 419 13.90000057220459 L 424.9625244140625 13.90000057220459" p="b669a6925e6e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_913f51026a71" d="M 396.96250915527344 192.9000005722046 L 415 192.9000005722046 L 415 125.30002498626709 A 4 4 0 0 1 419 121.30002498626709 L 424.9625244140625 121.30002498626709" p="b669a6925e6e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_d25c4b445eac" d="M 472.9625244140625 121.30002498626709 L 491 121.30002498626709 L 491 53.70004940032959 A 4 4 0 0 1 495 49.70004940032959 L 500.9625244140625 49.70004940032959" p="913f51026a71" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_6a0020e17384" d="M 653.9375305175781 49.70004940032959 L 672 49.70004940032959 L 672 49.70004940032959 L 681.9375610351562 49.70004940032959" p="d25c4b445eac" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0a4da854f2bd" d="M 472.9625244140625 121.30002498626709 L 491 121.30002498626709 L 491 135.2000494003296 A 4 4 0 0 0 495 139.2000494003296 L 500.9625244140625 139.2000494003296" p="913f51026a71" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_bcdddd941e42" d="M 752.0000305175781 139.2000494003296 L 771 139.2000494003296 L 771 89.49997615814209 A 4 4 0 0 1 775 85.49997615814209 L 780.0000610351562 85.49997615814209" p="0a4da854f2bd" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_deee513bcb67" d="M 752.0000305175781 139.2000494003296 L 771 139.2000494003296 L 771 153.0999517440796 A 4 4 0 0 0 775 157.0999517440796 L 780.0000610351562 157.0999517440796" p="0a4da854f2bd" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_7f4b33b73694" d="M 903.9000625610352 157.0999517440796 L 922 157.0999517440796 L 922 125.30002498626709 A 4 4 0 0 1 926 121.30002498626709 L 931.9000854492188 121.30002498626709" p="deee513bcb67" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e07d8b6b8f8c" d="M 903.9000625610352 157.0999517440796 L 922 157.0999517440796 L 922 157.0999517440796 L 931.9000854492188 157.0999517440796" p="deee513bcb67" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_633e304f9753" d="M 903.9000625610352 157.0999517440796 L 922 157.0999517440796 L 922 188.9000005722046 A 4 4 0 0 0 926 192.9000005722046 L 931.9000854492188 192.9000005722046" p="deee513bcb67" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_909a9cae7eba" d="M 396.96250915527344 192.9000005722046 L 415 192.9000005722046 L 415 296.3000249862671 A 4 4 0 0 0 419 300.3000249862671 L 424.9625244140625 300.3000249862671" p="b669a6925e6e" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_08fb49762f48" d="M 696.3000183105469 300.3000249862671 L 715 300.3000249862671 L 715 232.7000494003296 A 4 4 0 0 1 719 228.7000494003296 L 724.2999877929688 228.7000494003296" p="909a9cae7eba" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_5d3038064435" d="M 696.3000183105469 300.3000249862671 L 715 300.3000249862671 L 715 286.4000005722046 A 4 4 0 0 1 719 282.4000005722046 L 724.2999877929688 282.4000005722046" p="909a9cae7eba" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_e4e460b8730d" d="M 807.2999877929688 282.4000005722046 L 826 282.4000005722046 L 826 268.4999761581421 A 4 4 0 0 1 830 264.4999761581421 L 835.2999877929688 264.4999761581421" p="5d3038064435" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0149d5a7c4bc" d="M 807.2999877929688 282.4000005722046 L 826 282.4000005722046 L 826 296.3000249862671 A 4 4 0 0 0 830 300.3000249862671 L 835.2999877929688 300.3000249862671" p="5d3038064435" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_b548dba10dde" d="M 696.3000183105469 300.3000249862671 L 715 300.3000249862671 L 715 349.9999761581421 A 4 4 0 0 0 719 353.9999761581421 L 724.2999877929688 353.9999761581421" p="909a9cae7eba" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_a4d9781eaf7e" d="M 807.2999877929688 353.9999761581421 L 826 353.9999761581421 L 826 340.0999517440796 A 4 4 0 0 1 830 336.0999517440796 L 835.2999877929688 336.0999517440796" p="b548dba10dde" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_02c7f14f25b1" d="M 807.2999877929688 353.9999761581421 L 826 353.9999761581421 L 826 367.9000005722046 A 4 4 0 0 0 830 371.9000005722046 L 835.2999877929688 371.9000005722046" p="b548dba10dde" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_0ae1f2735d26" d="M 194.7624969482422 264.5 L 213 264.5 L 213 457.4000005722046 A 4 4 0 0 0 217 461.4000005722046 L 222.76251220703125 461.4000005722046" p="94dbd88a7ebf" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_8baffc977ed2" d="M 352.38751220703125 461.4000005722046 L 371 461.4000005722046 L 371 411.7000494003296 A 4 4 0 0 1 375 407.7000494003296 L 380.38751220703125 407.7000494003296" p="0ae1f2735d26" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_483ba20ee6a2" d="M 352.38751220703125 461.4000005722046 L 371 461.4000005722046 L 371 447.4999761581421 A 4 4 0 0 1 375 443.4999761581421 L 380.38751220703125 443.4999761581421" p="0ae1f2735d26" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_858b3e13d078" d="M 352.38751220703125 461.4000005722046 L 371 461.4000005722046 L 371 475.3000249862671 A 4 4 0 0 0 375 479.3000249862671 L 380.38751220703125 479.3000249862671" p="0ae1f2735d26" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path><path id="line_2c8e702d5af6" d="M 352.38751220703125 461.4000005722046 L 371 461.4000005722046 L 371 511.0999517440796 A 4 4 0 0 0 375 515.0999517440796 L 380.38751220703125 515.0999517440796" p="0ae1f2735d26" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(210.00006103515625, 30)" id="sdjakdjak6"><g id="subline_15a36b69c674" transform="translate(0.5,0.5)"><path id="line_92e820dc756a" d="M 163.375 25.100000381469727 L 182 25.100000381469727 L 182 25.09995174407959 L 191.375 25.09995174407959" p="15a36b69c674" stroke="rgb(140,140,140)" fill="none" stroke-linecap="square" stroke-width="1"></path></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g transform="translate(30, 2431.9998779296875)" id="sdjakdjak7"><g id="subline_root" transform="translate(0.5,0.5)"></g><g transform="translate(0.5,0.5)"></g><g class="svg-summary-con" transform="translate(0.5,0.5)"></g><g class="svg-boundary-con" transform="translate(0.5,0.5)"></g></g><g id="root"><rect x="30" y="2431.9998779296875" rx="5px" ry="5px" width="100" height="69" style="fill: #50C28B; stroke:none;"></rect><g><text text-anchor="start" align="top" anchor="start" font-size="25px" font-weight="normal" fill="rgb(255, 255, 255)" style="font-size:25px;font-family:微软雅黑;color:#fff;font-style:normal;text-align:left;font-weight:normal;"><tspan x="42" y="2476.9998779296875"><tspan>main()</tspan></tspan></text></g></g></svg>